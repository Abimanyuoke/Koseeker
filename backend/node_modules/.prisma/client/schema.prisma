generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique @default("")
  name            String
  email           String   @unique
  password        String
  phone           String
  profile_picture String   @default("")
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  kos             Kos[]    @relation("UserKos")
  reviews         Review[]
  books           Book[]
  likes           Like[]
}

model Kos {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  userId        Int
  name          String
  address       String
  pricePerMonth Float
  gender        Gender
  kampus        Kampus
  kota          Kota
  kalender      Kalender
  owner         User          @relation("UserKos", fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  images        KosImage[]
  facilities    KosFacility[]
  reviews       Review[]
  books         Book[]
  likes         Like[]
}

model KosImage {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  file      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id], onDelete: Cascade)
}

model KosFacility {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  facility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  userId    Int
  comment   String
  kos       Kos      @relation(fields: [kosId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id             Int        @id @default(autoincrement())
  uuid           String     @unique @default(uuid())
  kosId          Int
  userId         Int
  payment        Payment
  startDate      DateTime
  endDate        DateTime
  durationMonths Int        @default(1)
  status         BookStatus
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  kos            Kos        @relation(fields: [kosId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([kosId, userId])
}

enum Role {
  superadmin
  owner
  society
}

enum Kalender {
  minggu
  bulan
  tahun
}

enum Gender {
  male
  female
  all
}

enum BookStatus {
  pending
  accept
  reject
}

enum Payment {
  cash
  transfer
}

enum Kampus {
  UGM
  UNDIP
  UNPAD
  STAN
  UNAIR
  UB
  UI
  ITS
  ITB
  UNS
  TELKOM
  UNESA
  BINUS
  UMM
}

enum Kota {
  Jakarta
  Bandung
  Surabaya
  Medan
  Semarang
  Makassar
  Palembang
  Batam
  Malang
  Bogor
  Depok
  Tangerang
  Solo
  Makasar
  Yogyakarta
  Bekasi
}
