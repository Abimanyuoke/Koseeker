
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Kos
 * 
 */
export type Kos = $Result.DefaultSelection<Prisma.$KosPayload>
/**
 * Model KosImage
 * 
 */
export type KosImage = $Result.DefaultSelection<Prisma.$KosImagePayload>
/**
 * Model KosFacility
 * 
 */
export type KosFacility = $Result.DefaultSelection<Prisma.$KosFacilityPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Book
 * 
 */
export type Book = $Result.DefaultSelection<Prisma.$BookPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model BookingCalendar
 * 
 */
export type BookingCalendar = $Result.DefaultSelection<Prisma.$BookingCalendarPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  superadmin: 'superadmin',
  owner: 'owner',
  society: 'society'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  male: 'male',
  female: 'female',
  all: 'all'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Kampus: {
  UGM: 'UGM',
  UNDIP: 'UNDIP',
  UNPAD: 'UNPAD',
  STAN: 'STAN',
  UNAIR: 'UNAIR',
  UB: 'UB',
  UI: 'UI',
  ITS: 'ITS',
  ITB: 'ITB',
  UNS: 'UNS',
  TELKOM: 'TELKOM',
  UNESA: 'UNESA',
  BINUS: 'BINUS',
  UMM: 'UMM'
};

export type Kampus = (typeof Kampus)[keyof typeof Kampus]


export const Kota: {
  Jakarta: 'Jakarta',
  Bandung: 'Bandung',
  Surabaya: 'Surabaya',
  Medan: 'Medan',
  Semarang: 'Semarang',
  Makassar: 'Makassar',
  Palembang: 'Palembang',
  Batam: 'Batam',
  Malang: 'Malang',
  Bogor: 'Bogor',
  Depok: 'Depok',
  Tangerang: 'Tangerang',
  Solo: 'Solo',
  Makasar: 'Makasar',
  Yogyakarta: 'Yogyakarta',
  Bekasi: 'Bekasi'
};

export type Kota = (typeof Kota)[keyof typeof Kota]


export const Kalender: {
  minggu: 'minggu',
  bulan: 'bulan',
  tahun: 'tahun'
};

export type Kalender = (typeof Kalender)[keyof typeof Kalender]


export const Payment: {
  cash: 'cash',
  transfer: 'transfer'
};

export type Payment = (typeof Payment)[keyof typeof Payment]


export const BookStatus: {
  pending: 'pending',
  accept: 'accept',
  reject: 'reject'
};

export type BookStatus = (typeof BookStatus)[keyof typeof BookStatus]


export const NotificationType: {
  BOOKING_CREATED: 'BOOKING_CREATED',
  BOOKING_ACCEPTED: 'BOOKING_ACCEPTED',
  BOOKING_REJECTED: 'BOOKING_REJECTED',
  BOOKING_REMINDER: 'BOOKING_REMINDER',
  PAYMENT_DUE: 'PAYMENT_DUE',
  GENERAL: 'GENERAL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Kampus = $Enums.Kampus

export const Kampus: typeof $Enums.Kampus

export type Kota = $Enums.Kota

export const Kota: typeof $Enums.Kota

export type Kalender = $Enums.Kalender

export const Kalender: typeof $Enums.Kalender

export type Payment = $Enums.Payment

export const Payment: typeof $Enums.Payment

export type BookStatus = $Enums.BookStatus

export const BookStatus: typeof $Enums.BookStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.kos`: Exposes CRUD operations for the **Kos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kos
    * const kos = await prisma.kos.findMany()
    * ```
    */
  get kos(): Prisma.KosDelegate<ExtArgs>;

  /**
   * `prisma.kosImage`: Exposes CRUD operations for the **KosImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KosImages
    * const kosImages = await prisma.kosImage.findMany()
    * ```
    */
  get kosImage(): Prisma.KosImageDelegate<ExtArgs>;

  /**
   * `prisma.kosFacility`: Exposes CRUD operations for the **KosFacility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KosFacilities
    * const kosFacilities = await prisma.kosFacility.findMany()
    * ```
    */
  get kosFacility(): Prisma.KosFacilityDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<ExtArgs>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.bookingCalendar`: Exposes CRUD operations for the **BookingCalendar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingCalendars
    * const bookingCalendars = await prisma.bookingCalendar.findMany()
    * ```
    */
  get bookingCalendar(): Prisma.BookingCalendarDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Kos: 'Kos',
    KosImage: 'KosImage',
    KosFacility: 'KosFacility',
    Review: 'Review',
    Book: 'Book',
    Like: 'Like',
    Notification: 'Notification',
    BookingCalendar: 'BookingCalendar'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "kos" | "kosImage" | "kosFacility" | "review" | "book" | "like" | "notification" | "bookingCalendar"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Kos: {
        payload: Prisma.$KosPayload<ExtArgs>
        fields: Prisma.KosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          findFirst: {
            args: Prisma.KosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          findMany: {
            args: Prisma.KosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>[]
          }
          create: {
            args: Prisma.KosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          createMany: {
            args: Prisma.KosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          update: {
            args: Prisma.KosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          deleteMany: {
            args: Prisma.KosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosPayload>
          }
          aggregate: {
            args: Prisma.KosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKos>
          }
          groupBy: {
            args: Prisma.KosGroupByArgs<ExtArgs>
            result: $Utils.Optional<KosGroupByOutputType>[]
          }
          count: {
            args: Prisma.KosCountArgs<ExtArgs>
            result: $Utils.Optional<KosCountAggregateOutputType> | number
          }
        }
      }
      KosImage: {
        payload: Prisma.$KosImagePayload<ExtArgs>
        fields: Prisma.KosImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KosImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KosImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          findFirst: {
            args: Prisma.KosImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KosImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          findMany: {
            args: Prisma.KosImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>[]
          }
          create: {
            args: Prisma.KosImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          createMany: {
            args: Prisma.KosImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KosImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          update: {
            args: Prisma.KosImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          deleteMany: {
            args: Prisma.KosImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KosImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KosImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosImagePayload>
          }
          aggregate: {
            args: Prisma.KosImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKosImage>
          }
          groupBy: {
            args: Prisma.KosImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<KosImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.KosImageCountArgs<ExtArgs>
            result: $Utils.Optional<KosImageCountAggregateOutputType> | number
          }
        }
      }
      KosFacility: {
        payload: Prisma.$KosFacilityPayload<ExtArgs>
        fields: Prisma.KosFacilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KosFacilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KosFacilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          findFirst: {
            args: Prisma.KosFacilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KosFacilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          findMany: {
            args: Prisma.KosFacilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>[]
          }
          create: {
            args: Prisma.KosFacilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          createMany: {
            args: Prisma.KosFacilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KosFacilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          update: {
            args: Prisma.KosFacilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          deleteMany: {
            args: Prisma.KosFacilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KosFacilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KosFacilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KosFacilityPayload>
          }
          aggregate: {
            args: Prisma.KosFacilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKosFacility>
          }
          groupBy: {
            args: Prisma.KosFacilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<KosFacilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.KosFacilityCountArgs<ExtArgs>
            result: $Utils.Optional<KosFacilityCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Book: {
        payload: Prisma.$BookPayload<ExtArgs>
        fields: Prisma.BookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findFirst: {
            args: Prisma.BookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findMany: {
            args: Prisma.BookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          create: {
            args: Prisma.BookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          createMany: {
            args: Prisma.BookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          update: {
            args: Prisma.BookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          deleteMany: {
            args: Prisma.BookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          aggregate: {
            args: Prisma.BookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBook>
          }
          groupBy: {
            args: Prisma.BookGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookCountArgs<ExtArgs>
            result: $Utils.Optional<BookCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      BookingCalendar: {
        payload: Prisma.$BookingCalendarPayload<ExtArgs>
        fields: Prisma.BookingCalendarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingCalendarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingCalendarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          findFirst: {
            args: Prisma.BookingCalendarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingCalendarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          findMany: {
            args: Prisma.BookingCalendarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>[]
          }
          create: {
            args: Prisma.BookingCalendarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          createMany: {
            args: Prisma.BookingCalendarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookingCalendarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          update: {
            args: Prisma.BookingCalendarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          deleteMany: {
            args: Prisma.BookingCalendarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingCalendarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookingCalendarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingCalendarPayload>
          }
          aggregate: {
            args: Prisma.BookingCalendarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookingCalendar>
          }
          groupBy: {
            args: Prisma.BookingCalendarGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingCalendarGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCalendarCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCalendarCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    kos: number
    reviews: number
    books: number
    likes: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | UserCountOutputTypeCountKosArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    books?: boolean | UserCountOutputTypeCountBooksArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountKosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type KosCountOutputType
   */

  export type KosCountOutputType = {
    images: number
    facilities: number
    reviews: number
    books: number
    likes: number
    bookingCalendar: number
  }

  export type KosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | KosCountOutputTypeCountImagesArgs
    facilities?: boolean | KosCountOutputTypeCountFacilitiesArgs
    reviews?: boolean | KosCountOutputTypeCountReviewsArgs
    books?: boolean | KosCountOutputTypeCountBooksArgs
    likes?: boolean | KosCountOutputTypeCountLikesArgs
    bookingCalendar?: boolean | KosCountOutputTypeCountBookingCalendarArgs
  }

  // Custom InputTypes
  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosCountOutputType
     */
    select?: KosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosImageWhereInput
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountFacilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosFacilityWhereInput
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }

  /**
   * KosCountOutputType without action
   */
  export type KosCountOutputTypeCountBookingCalendarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingCalendarWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
    profile_picture: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
    profile_picture: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    uuid: number
    name: number
    email: number
    password: number
    phone: number
    profile_picture: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    profile_picture?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    profile_picture?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    profile_picture?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    uuid: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    profile_picture?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | User$kosArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    books?: boolean | User$booksArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    uuid?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    profile_picture?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | User$kosArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    books?: boolean | User$booksArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      books: Prisma.$BookPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      name: string
      email: string
      password: string
      phone: string
      profile_picture: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends User$kosArgs<ExtArgs> = {}>(args?: Subset<T, User$kosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    books<T extends User$booksArgs<ExtArgs> = {}>(args?: Subset<T, User$booksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly uuid: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly profile_picture: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.kos
   */
  export type User$kosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    where?: KosWhereInput
    orderBy?: KosOrderByWithRelationInput | KosOrderByWithRelationInput[]
    cursor?: KosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KosScalarFieldEnum | KosScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.books
   */
  export type User$booksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Kos
   */

  export type AggregateKos = {
    _count: KosCountAggregateOutputType | null
    _avg: KosAvgAggregateOutputType | null
    _sum: KosSumAggregateOutputType | null
    _min: KosMinAggregateOutputType | null
    _max: KosMaxAggregateOutputType | null
  }

  export type KosAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerMonth: number | null
    discountPercent: number | null
  }

  export type KosSumAggregateOutputType = {
    id: number | null
    userId: number | null
    pricePerMonth: number | null
    discountPercent: number | null
  }

  export type KosMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    userId: number | null
    name: string | null
    address: string | null
    pricePerMonth: number | null
    discountPercent: number | null
    discountEndDate: Date | null
    gender: $Enums.Gender | null
    kampus: $Enums.Kampus | null
    kota: $Enums.Kota | null
    kalender: $Enums.Kalender | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    userId: number | null
    name: string | null
    address: string | null
    pricePerMonth: number | null
    discountPercent: number | null
    discountEndDate: Date | null
    gender: $Enums.Gender | null
    kampus: $Enums.Kampus | null
    kota: $Enums.Kota | null
    kalender: $Enums.Kalender | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosCountAggregateOutputType = {
    id: number
    uuid: number
    userId: number
    name: number
    address: number
    pricePerMonth: number
    discountPercent: number
    discountEndDate: number
    gender: number
    kampus: number
    kota: number
    kalender: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KosAvgAggregateInputType = {
    id?: true
    userId?: true
    pricePerMonth?: true
    discountPercent?: true
  }

  export type KosSumAggregateInputType = {
    id?: true
    userId?: true
    pricePerMonth?: true
    discountPercent?: true
  }

  export type KosMinAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    name?: true
    address?: true
    pricePerMonth?: true
    discountPercent?: true
    discountEndDate?: true
    gender?: true
    kampus?: true
    kota?: true
    kalender?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosMaxAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    name?: true
    address?: true
    pricePerMonth?: true
    discountPercent?: true
    discountEndDate?: true
    gender?: true
    kampus?: true
    kota?: true
    kalender?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosCountAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    name?: true
    address?: true
    pricePerMonth?: true
    discountPercent?: true
    discountEndDate?: true
    gender?: true
    kampus?: true
    kota?: true
    kalender?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kos to aggregate.
     */
    where?: KosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kos to fetch.
     */
    orderBy?: KosOrderByWithRelationInput | KosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kos
    **/
    _count?: true | KosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KosMaxAggregateInputType
  }

  export type GetKosAggregateType<T extends KosAggregateArgs> = {
        [P in keyof T & keyof AggregateKos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKos[P]>
      : GetScalarType<T[P], AggregateKos[P]>
  }




  export type KosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosWhereInput
    orderBy?: KosOrderByWithAggregationInput | KosOrderByWithAggregationInput[]
    by: KosScalarFieldEnum[] | KosScalarFieldEnum
    having?: KosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KosCountAggregateInputType | true
    _avg?: KosAvgAggregateInputType
    _sum?: KosSumAggregateInputType
    _min?: KosMinAggregateInputType
    _max?: KosMaxAggregateInputType
  }

  export type KosGroupByOutputType = {
    id: number
    uuid: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent: number | null
    discountEndDate: Date | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt: Date
    updatedAt: Date
    _count: KosCountAggregateOutputType | null
    _avg: KosAvgAggregateOutputType | null
    _sum: KosSumAggregateOutputType | null
    _min: KosMinAggregateOutputType | null
    _max: KosMaxAggregateOutputType | null
  }

  type GetKosGroupByPayload<T extends KosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KosGroupByOutputType[P]>
            : GetScalarType<T[P], KosGroupByOutputType[P]>
        }
      >
    >


  export type KosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    userId?: boolean
    name?: boolean
    address?: boolean
    pricePerMonth?: boolean
    discountPercent?: boolean
    discountEndDate?: boolean
    gender?: boolean
    kampus?: boolean
    kota?: boolean
    kalender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | Kos$imagesArgs<ExtArgs>
    facilities?: boolean | Kos$facilitiesArgs<ExtArgs>
    reviews?: boolean | Kos$reviewsArgs<ExtArgs>
    books?: boolean | Kos$booksArgs<ExtArgs>
    likes?: boolean | Kos$likesArgs<ExtArgs>
    bookingCalendar?: boolean | Kos$bookingCalendarArgs<ExtArgs>
    _count?: boolean | KosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kos"]>


  export type KosSelectScalar = {
    id?: boolean
    uuid?: boolean
    userId?: boolean
    name?: boolean
    address?: boolean
    pricePerMonth?: boolean
    discountPercent?: boolean
    discountEndDate?: boolean
    gender?: boolean
    kampus?: boolean
    kota?: boolean
    kalender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | Kos$imagesArgs<ExtArgs>
    facilities?: boolean | Kos$facilitiesArgs<ExtArgs>
    reviews?: boolean | Kos$reviewsArgs<ExtArgs>
    books?: boolean | Kos$booksArgs<ExtArgs>
    likes?: boolean | Kos$likesArgs<ExtArgs>
    bookingCalendar?: boolean | Kos$bookingCalendarArgs<ExtArgs>
    _count?: boolean | KosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $KosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kos"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      images: Prisma.$KosImagePayload<ExtArgs>[]
      facilities: Prisma.$KosFacilityPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      books: Prisma.$BookPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
      bookingCalendar: Prisma.$BookingCalendarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      userId: number
      name: string
      address: string
      pricePerMonth: number
      discountPercent: number | null
      discountEndDate: Date | null
      gender: $Enums.Gender
      kampus: $Enums.Kampus
      kota: $Enums.Kota
      kalender: $Enums.Kalender
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kos"]>
    composites: {}
  }

  type KosGetPayload<S extends boolean | null | undefined | KosDefaultArgs> = $Result.GetResult<Prisma.$KosPayload, S>

  type KosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KosCountAggregateInputType | true
    }

  export interface KosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kos'], meta: { name: 'Kos' } }
    /**
     * Find zero or one Kos that matches the filter.
     * @param {KosFindUniqueArgs} args - Arguments to find a Kos
     * @example
     * // Get one Kos
     * const kos = await prisma.kos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KosFindUniqueArgs>(args: SelectSubset<T, KosFindUniqueArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KosFindUniqueOrThrowArgs} args - Arguments to find a Kos
     * @example
     * // Get one Kos
     * const kos = await prisma.kos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KosFindUniqueOrThrowArgs>(args: SelectSubset<T, KosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFindFirstArgs} args - Arguments to find a Kos
     * @example
     * // Get one Kos
     * const kos = await prisma.kos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KosFindFirstArgs>(args?: SelectSubset<T, KosFindFirstArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFindFirstOrThrowArgs} args - Arguments to find a Kos
     * @example
     * // Get one Kos
     * const kos = await prisma.kos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KosFindFirstOrThrowArgs>(args?: SelectSubset<T, KosFindFirstOrThrowArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kos
     * const kos = await prisma.kos.findMany()
     * 
     * // Get first 10 Kos
     * const kos = await prisma.kos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kosWithIdOnly = await prisma.kos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KosFindManyArgs>(args?: SelectSubset<T, KosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kos.
     * @param {KosCreateArgs} args - Arguments to create a Kos.
     * @example
     * // Create one Kos
     * const Kos = await prisma.kos.create({
     *   data: {
     *     // ... data to create a Kos
     *   }
     * })
     * 
     */
    create<T extends KosCreateArgs>(args: SelectSubset<T, KosCreateArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kos.
     * @param {KosCreateManyArgs} args - Arguments to create many Kos.
     * @example
     * // Create many Kos
     * const kos = await prisma.kos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KosCreateManyArgs>(args?: SelectSubset<T, KosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kos.
     * @param {KosDeleteArgs} args - Arguments to delete one Kos.
     * @example
     * // Delete one Kos
     * const Kos = await prisma.kos.delete({
     *   where: {
     *     // ... filter to delete one Kos
     *   }
     * })
     * 
     */
    delete<T extends KosDeleteArgs>(args: SelectSubset<T, KosDeleteArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kos.
     * @param {KosUpdateArgs} args - Arguments to update one Kos.
     * @example
     * // Update one Kos
     * const kos = await prisma.kos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KosUpdateArgs>(args: SelectSubset<T, KosUpdateArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kos.
     * @param {KosDeleteManyArgs} args - Arguments to filter Kos to delete.
     * @example
     * // Delete a few Kos
     * const { count } = await prisma.kos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KosDeleteManyArgs>(args?: SelectSubset<T, KosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kos
     * const kos = await prisma.kos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KosUpdateManyArgs>(args: SelectSubset<T, KosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kos.
     * @param {KosUpsertArgs} args - Arguments to update or create a Kos.
     * @example
     * // Update or create a Kos
     * const kos = await prisma.kos.upsert({
     *   create: {
     *     // ... data to create a Kos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kos we want to update
     *   }
     * })
     */
    upsert<T extends KosUpsertArgs>(args: SelectSubset<T, KosUpsertArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosCountArgs} args - Arguments to filter Kos to count.
     * @example
     * // Count the number of Kos
     * const count = await prisma.kos.count({
     *   where: {
     *     // ... the filter for the Kos we want to count
     *   }
     * })
    **/
    count<T extends KosCountArgs>(
      args?: Subset<T, KosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KosAggregateArgs>(args: Subset<T, KosAggregateArgs>): Prisma.PrismaPromise<GetKosAggregateType<T>>

    /**
     * Group by Kos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KosGroupByArgs['orderBy'] }
        : { orderBy?: KosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kos model
   */
  readonly fields: KosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    images<T extends Kos$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Kos$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findMany"> | Null>
    facilities<T extends Kos$facilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Kos$facilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends Kos$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Kos$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    books<T extends Kos$booksArgs<ExtArgs> = {}>(args?: Subset<T, Kos$booksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Kos$likesArgs<ExtArgs> = {}>(args?: Subset<T, Kos$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany"> | Null>
    bookingCalendar<T extends Kos$bookingCalendarArgs<ExtArgs> = {}>(args?: Subset<T, Kos$bookingCalendarArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kos model
   */ 
  interface KosFieldRefs {
    readonly id: FieldRef<"Kos", 'Int'>
    readonly uuid: FieldRef<"Kos", 'String'>
    readonly userId: FieldRef<"Kos", 'Int'>
    readonly name: FieldRef<"Kos", 'String'>
    readonly address: FieldRef<"Kos", 'String'>
    readonly pricePerMonth: FieldRef<"Kos", 'Float'>
    readonly discountPercent: FieldRef<"Kos", 'Float'>
    readonly discountEndDate: FieldRef<"Kos", 'DateTime'>
    readonly gender: FieldRef<"Kos", 'Gender'>
    readonly kampus: FieldRef<"Kos", 'Kampus'>
    readonly kota: FieldRef<"Kos", 'Kota'>
    readonly kalender: FieldRef<"Kos", 'Kalender'>
    readonly createdAt: FieldRef<"Kos", 'DateTime'>
    readonly updatedAt: FieldRef<"Kos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Kos findUnique
   */
  export type KosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter, which Kos to fetch.
     */
    where: KosWhereUniqueInput
  }

  /**
   * Kos findUniqueOrThrow
   */
  export type KosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter, which Kos to fetch.
     */
    where: KosWhereUniqueInput
  }

  /**
   * Kos findFirst
   */
  export type KosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter, which Kos to fetch.
     */
    where?: KosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kos to fetch.
     */
    orderBy?: KosOrderByWithRelationInput | KosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kos.
     */
    cursor?: KosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kos.
     */
    distinct?: KosScalarFieldEnum | KosScalarFieldEnum[]
  }

  /**
   * Kos findFirstOrThrow
   */
  export type KosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter, which Kos to fetch.
     */
    where?: KosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kos to fetch.
     */
    orderBy?: KosOrderByWithRelationInput | KosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kos.
     */
    cursor?: KosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kos.
     */
    distinct?: KosScalarFieldEnum | KosScalarFieldEnum[]
  }

  /**
   * Kos findMany
   */
  export type KosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter, which Kos to fetch.
     */
    where?: KosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kos to fetch.
     */
    orderBy?: KosOrderByWithRelationInput | KosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kos.
     */
    cursor?: KosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kos.
     */
    skip?: number
    distinct?: KosScalarFieldEnum | KosScalarFieldEnum[]
  }

  /**
   * Kos create
   */
  export type KosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * The data needed to create a Kos.
     */
    data: XOR<KosCreateInput, KosUncheckedCreateInput>
  }

  /**
   * Kos createMany
   */
  export type KosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kos.
     */
    data: KosCreateManyInput | KosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kos update
   */
  export type KosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * The data needed to update a Kos.
     */
    data: XOR<KosUpdateInput, KosUncheckedUpdateInput>
    /**
     * Choose, which Kos to update.
     */
    where: KosWhereUniqueInput
  }

  /**
   * Kos updateMany
   */
  export type KosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kos.
     */
    data: XOR<KosUpdateManyMutationInput, KosUncheckedUpdateManyInput>
    /**
     * Filter which Kos to update
     */
    where?: KosWhereInput
  }

  /**
   * Kos upsert
   */
  export type KosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * The filter to search for the Kos to update in case it exists.
     */
    where: KosWhereUniqueInput
    /**
     * In case the Kos found by the `where` argument doesn't exist, create a new Kos with this data.
     */
    create: XOR<KosCreateInput, KosUncheckedCreateInput>
    /**
     * In case the Kos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KosUpdateInput, KosUncheckedUpdateInput>
  }

  /**
   * Kos delete
   */
  export type KosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
    /**
     * Filter which Kos to delete.
     */
    where: KosWhereUniqueInput
  }

  /**
   * Kos deleteMany
   */
  export type KosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kos to delete
     */
    where?: KosWhereInput
  }

  /**
   * Kos.images
   */
  export type Kos$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    where?: KosImageWhereInput
    orderBy?: KosImageOrderByWithRelationInput | KosImageOrderByWithRelationInput[]
    cursor?: KosImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KosImageScalarFieldEnum | KosImageScalarFieldEnum[]
  }

  /**
   * Kos.facilities
   */
  export type Kos$facilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    where?: KosFacilityWhereInput
    orderBy?: KosFacilityOrderByWithRelationInput | KosFacilityOrderByWithRelationInput[]
    cursor?: KosFacilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KosFacilityScalarFieldEnum | KosFacilityScalarFieldEnum[]
  }

  /**
   * Kos.reviews
   */
  export type Kos$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Kos.books
   */
  export type Kos$booksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Kos.likes
   */
  export type Kos$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Kos.bookingCalendar
   */
  export type Kos$bookingCalendarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    where?: BookingCalendarWhereInput
    orderBy?: BookingCalendarOrderByWithRelationInput | BookingCalendarOrderByWithRelationInput[]
    cursor?: BookingCalendarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingCalendarScalarFieldEnum | BookingCalendarScalarFieldEnum[]
  }

  /**
   * Kos without action
   */
  export type KosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kos
     */
    select?: KosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosInclude<ExtArgs> | null
  }


  /**
   * Model KosImage
   */

  export type AggregateKosImage = {
    _count: KosImageCountAggregateOutputType | null
    _avg: KosImageAvgAggregateOutputType | null
    _sum: KosImageSumAggregateOutputType | null
    _min: KosImageMinAggregateOutputType | null
    _max: KosImageMaxAggregateOutputType | null
  }

  export type KosImageAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
  }

  export type KosImageSumAggregateOutputType = {
    id: number | null
    kosId: number | null
  }

  export type KosImageMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    file: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosImageMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    file: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosImageCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    file: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KosImageAvgAggregateInputType = {
    id?: true
    kosId?: true
  }

  export type KosImageSumAggregateInputType = {
    id?: true
    kosId?: true
  }

  export type KosImageMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    file?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosImageMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    file?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosImageCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    file?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KosImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KosImage to aggregate.
     */
    where?: KosImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosImages to fetch.
     */
    orderBy?: KosImageOrderByWithRelationInput | KosImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KosImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KosImages
    **/
    _count?: true | KosImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KosImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KosImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KosImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KosImageMaxAggregateInputType
  }

  export type GetKosImageAggregateType<T extends KosImageAggregateArgs> = {
        [P in keyof T & keyof AggregateKosImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKosImage[P]>
      : GetScalarType<T[P], AggregateKosImage[P]>
  }




  export type KosImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosImageWhereInput
    orderBy?: KosImageOrderByWithAggregationInput | KosImageOrderByWithAggregationInput[]
    by: KosImageScalarFieldEnum[] | KosImageScalarFieldEnum
    having?: KosImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KosImageCountAggregateInputType | true
    _avg?: KosImageAvgAggregateInputType
    _sum?: KosImageSumAggregateInputType
    _min?: KosImageMinAggregateInputType
    _max?: KosImageMaxAggregateInputType
  }

  export type KosImageGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    file: string
    createdAt: Date
    updatedAt: Date
    _count: KosImageCountAggregateOutputType | null
    _avg: KosImageAvgAggregateOutputType | null
    _sum: KosImageSumAggregateOutputType | null
    _min: KosImageMinAggregateOutputType | null
    _max: KosImageMaxAggregateOutputType | null
  }

  type GetKosImageGroupByPayload<T extends KosImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KosImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KosImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KosImageGroupByOutputType[P]>
            : GetScalarType<T[P], KosImageGroupByOutputType[P]>
        }
      >
    >


  export type KosImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    file?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kosImage"]>


  export type KosImageSelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    file?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KosImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
  }

  export type $KosImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KosImage"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      file: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kosImage"]>
    composites: {}
  }

  type KosImageGetPayload<S extends boolean | null | undefined | KosImageDefaultArgs> = $Result.GetResult<Prisma.$KosImagePayload, S>

  type KosImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KosImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KosImageCountAggregateInputType | true
    }

  export interface KosImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KosImage'], meta: { name: 'KosImage' } }
    /**
     * Find zero or one KosImage that matches the filter.
     * @param {KosImageFindUniqueArgs} args - Arguments to find a KosImage
     * @example
     * // Get one KosImage
     * const kosImage = await prisma.kosImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KosImageFindUniqueArgs>(args: SelectSubset<T, KosImageFindUniqueArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KosImage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KosImageFindUniqueOrThrowArgs} args - Arguments to find a KosImage
     * @example
     * // Get one KosImage
     * const kosImage = await prisma.kosImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KosImageFindUniqueOrThrowArgs>(args: SelectSubset<T, KosImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KosImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageFindFirstArgs} args - Arguments to find a KosImage
     * @example
     * // Get one KosImage
     * const kosImage = await prisma.kosImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KosImageFindFirstArgs>(args?: SelectSubset<T, KosImageFindFirstArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KosImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageFindFirstOrThrowArgs} args - Arguments to find a KosImage
     * @example
     * // Get one KosImage
     * const kosImage = await prisma.kosImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KosImageFindFirstOrThrowArgs>(args?: SelectSubset<T, KosImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KosImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KosImages
     * const kosImages = await prisma.kosImage.findMany()
     * 
     * // Get first 10 KosImages
     * const kosImages = await prisma.kosImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kosImageWithIdOnly = await prisma.kosImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KosImageFindManyArgs>(args?: SelectSubset<T, KosImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KosImage.
     * @param {KosImageCreateArgs} args - Arguments to create a KosImage.
     * @example
     * // Create one KosImage
     * const KosImage = await prisma.kosImage.create({
     *   data: {
     *     // ... data to create a KosImage
     *   }
     * })
     * 
     */
    create<T extends KosImageCreateArgs>(args: SelectSubset<T, KosImageCreateArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KosImages.
     * @param {KosImageCreateManyArgs} args - Arguments to create many KosImages.
     * @example
     * // Create many KosImages
     * const kosImage = await prisma.kosImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KosImageCreateManyArgs>(args?: SelectSubset<T, KosImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KosImage.
     * @param {KosImageDeleteArgs} args - Arguments to delete one KosImage.
     * @example
     * // Delete one KosImage
     * const KosImage = await prisma.kosImage.delete({
     *   where: {
     *     // ... filter to delete one KosImage
     *   }
     * })
     * 
     */
    delete<T extends KosImageDeleteArgs>(args: SelectSubset<T, KosImageDeleteArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KosImage.
     * @param {KosImageUpdateArgs} args - Arguments to update one KosImage.
     * @example
     * // Update one KosImage
     * const kosImage = await prisma.kosImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KosImageUpdateArgs>(args: SelectSubset<T, KosImageUpdateArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KosImages.
     * @param {KosImageDeleteManyArgs} args - Arguments to filter KosImages to delete.
     * @example
     * // Delete a few KosImages
     * const { count } = await prisma.kosImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KosImageDeleteManyArgs>(args?: SelectSubset<T, KosImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KosImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KosImages
     * const kosImage = await prisma.kosImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KosImageUpdateManyArgs>(args: SelectSubset<T, KosImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KosImage.
     * @param {KosImageUpsertArgs} args - Arguments to update or create a KosImage.
     * @example
     * // Update or create a KosImage
     * const kosImage = await prisma.kosImage.upsert({
     *   create: {
     *     // ... data to create a KosImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KosImage we want to update
     *   }
     * })
     */
    upsert<T extends KosImageUpsertArgs>(args: SelectSubset<T, KosImageUpsertArgs<ExtArgs>>): Prisma__KosImageClient<$Result.GetResult<Prisma.$KosImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KosImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageCountArgs} args - Arguments to filter KosImages to count.
     * @example
     * // Count the number of KosImages
     * const count = await prisma.kosImage.count({
     *   where: {
     *     // ... the filter for the KosImages we want to count
     *   }
     * })
    **/
    count<T extends KosImageCountArgs>(
      args?: Subset<T, KosImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KosImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KosImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KosImageAggregateArgs>(args: Subset<T, KosImageAggregateArgs>): Prisma.PrismaPromise<GetKosImageAggregateType<T>>

    /**
     * Group by KosImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KosImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KosImageGroupByArgs['orderBy'] }
        : { orderBy?: KosImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KosImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKosImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KosImage model
   */
  readonly fields: KosImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KosImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KosImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KosImage model
   */ 
  interface KosImageFieldRefs {
    readonly id: FieldRef<"KosImage", 'Int'>
    readonly uuid: FieldRef<"KosImage", 'String'>
    readonly kosId: FieldRef<"KosImage", 'Int'>
    readonly file: FieldRef<"KosImage", 'String'>
    readonly createdAt: FieldRef<"KosImage", 'DateTime'>
    readonly updatedAt: FieldRef<"KosImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KosImage findUnique
   */
  export type KosImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter, which KosImage to fetch.
     */
    where: KosImageWhereUniqueInput
  }

  /**
   * KosImage findUniqueOrThrow
   */
  export type KosImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter, which KosImage to fetch.
     */
    where: KosImageWhereUniqueInput
  }

  /**
   * KosImage findFirst
   */
  export type KosImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter, which KosImage to fetch.
     */
    where?: KosImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosImages to fetch.
     */
    orderBy?: KosImageOrderByWithRelationInput | KosImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KosImages.
     */
    cursor?: KosImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KosImages.
     */
    distinct?: KosImageScalarFieldEnum | KosImageScalarFieldEnum[]
  }

  /**
   * KosImage findFirstOrThrow
   */
  export type KosImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter, which KosImage to fetch.
     */
    where?: KosImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosImages to fetch.
     */
    orderBy?: KosImageOrderByWithRelationInput | KosImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KosImages.
     */
    cursor?: KosImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KosImages.
     */
    distinct?: KosImageScalarFieldEnum | KosImageScalarFieldEnum[]
  }

  /**
   * KosImage findMany
   */
  export type KosImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter, which KosImages to fetch.
     */
    where?: KosImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosImages to fetch.
     */
    orderBy?: KosImageOrderByWithRelationInput | KosImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KosImages.
     */
    cursor?: KosImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosImages.
     */
    skip?: number
    distinct?: KosImageScalarFieldEnum | KosImageScalarFieldEnum[]
  }

  /**
   * KosImage create
   */
  export type KosImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * The data needed to create a KosImage.
     */
    data: XOR<KosImageCreateInput, KosImageUncheckedCreateInput>
  }

  /**
   * KosImage createMany
   */
  export type KosImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KosImages.
     */
    data: KosImageCreateManyInput | KosImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KosImage update
   */
  export type KosImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * The data needed to update a KosImage.
     */
    data: XOR<KosImageUpdateInput, KosImageUncheckedUpdateInput>
    /**
     * Choose, which KosImage to update.
     */
    where: KosImageWhereUniqueInput
  }

  /**
   * KosImage updateMany
   */
  export type KosImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KosImages.
     */
    data: XOR<KosImageUpdateManyMutationInput, KosImageUncheckedUpdateManyInput>
    /**
     * Filter which KosImages to update
     */
    where?: KosImageWhereInput
  }

  /**
   * KosImage upsert
   */
  export type KosImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * The filter to search for the KosImage to update in case it exists.
     */
    where: KosImageWhereUniqueInput
    /**
     * In case the KosImage found by the `where` argument doesn't exist, create a new KosImage with this data.
     */
    create: XOR<KosImageCreateInput, KosImageUncheckedCreateInput>
    /**
     * In case the KosImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KosImageUpdateInput, KosImageUncheckedUpdateInput>
  }

  /**
   * KosImage delete
   */
  export type KosImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
    /**
     * Filter which KosImage to delete.
     */
    where: KosImageWhereUniqueInput
  }

  /**
   * KosImage deleteMany
   */
  export type KosImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KosImages to delete
     */
    where?: KosImageWhereInput
  }

  /**
   * KosImage without action
   */
  export type KosImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosImage
     */
    select?: KosImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosImageInclude<ExtArgs> | null
  }


  /**
   * Model KosFacility
   */

  export type AggregateKosFacility = {
    _count: KosFacilityCountAggregateOutputType | null
    _avg: KosFacilityAvgAggregateOutputType | null
    _sum: KosFacilitySumAggregateOutputType | null
    _min: KosFacilityMinAggregateOutputType | null
    _max: KosFacilityMaxAggregateOutputType | null
  }

  export type KosFacilityAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
  }

  export type KosFacilitySumAggregateOutputType = {
    id: number | null
    kosId: number | null
  }

  export type KosFacilityMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    facility: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosFacilityMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    facility: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KosFacilityCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    facility: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KosFacilityAvgAggregateInputType = {
    id?: true
    kosId?: true
  }

  export type KosFacilitySumAggregateInputType = {
    id?: true
    kosId?: true
  }

  export type KosFacilityMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    facility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosFacilityMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    facility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KosFacilityCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    facility?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KosFacilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KosFacility to aggregate.
     */
    where?: KosFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosFacilities to fetch.
     */
    orderBy?: KosFacilityOrderByWithRelationInput | KosFacilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KosFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosFacilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosFacilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KosFacilities
    **/
    _count?: true | KosFacilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KosFacilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KosFacilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KosFacilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KosFacilityMaxAggregateInputType
  }

  export type GetKosFacilityAggregateType<T extends KosFacilityAggregateArgs> = {
        [P in keyof T & keyof AggregateKosFacility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKosFacility[P]>
      : GetScalarType<T[P], AggregateKosFacility[P]>
  }




  export type KosFacilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KosFacilityWhereInput
    orderBy?: KosFacilityOrderByWithAggregationInput | KosFacilityOrderByWithAggregationInput[]
    by: KosFacilityScalarFieldEnum[] | KosFacilityScalarFieldEnum
    having?: KosFacilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KosFacilityCountAggregateInputType | true
    _avg?: KosFacilityAvgAggregateInputType
    _sum?: KosFacilitySumAggregateInputType
    _min?: KosFacilityMinAggregateInputType
    _max?: KosFacilityMaxAggregateInputType
  }

  export type KosFacilityGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    facility: string
    createdAt: Date
    updatedAt: Date
    _count: KosFacilityCountAggregateOutputType | null
    _avg: KosFacilityAvgAggregateOutputType | null
    _sum: KosFacilitySumAggregateOutputType | null
    _min: KosFacilityMinAggregateOutputType | null
    _max: KosFacilityMaxAggregateOutputType | null
  }

  type GetKosFacilityGroupByPayload<T extends KosFacilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KosFacilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KosFacilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KosFacilityGroupByOutputType[P]>
            : GetScalarType<T[P], KosFacilityGroupByOutputType[P]>
        }
      >
    >


  export type KosFacilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    facility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kosFacility"]>


  export type KosFacilitySelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    facility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KosFacilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
  }

  export type $KosFacilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KosFacility"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      facility: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kosFacility"]>
    composites: {}
  }

  type KosFacilityGetPayload<S extends boolean | null | undefined | KosFacilityDefaultArgs> = $Result.GetResult<Prisma.$KosFacilityPayload, S>

  type KosFacilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KosFacilityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KosFacilityCountAggregateInputType | true
    }

  export interface KosFacilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KosFacility'], meta: { name: 'KosFacility' } }
    /**
     * Find zero or one KosFacility that matches the filter.
     * @param {KosFacilityFindUniqueArgs} args - Arguments to find a KosFacility
     * @example
     * // Get one KosFacility
     * const kosFacility = await prisma.kosFacility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KosFacilityFindUniqueArgs>(args: SelectSubset<T, KosFacilityFindUniqueArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KosFacility that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KosFacilityFindUniqueOrThrowArgs} args - Arguments to find a KosFacility
     * @example
     * // Get one KosFacility
     * const kosFacility = await prisma.kosFacility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KosFacilityFindUniqueOrThrowArgs>(args: SelectSubset<T, KosFacilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KosFacility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityFindFirstArgs} args - Arguments to find a KosFacility
     * @example
     * // Get one KosFacility
     * const kosFacility = await prisma.kosFacility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KosFacilityFindFirstArgs>(args?: SelectSubset<T, KosFacilityFindFirstArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KosFacility that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityFindFirstOrThrowArgs} args - Arguments to find a KosFacility
     * @example
     * // Get one KosFacility
     * const kosFacility = await prisma.kosFacility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KosFacilityFindFirstOrThrowArgs>(args?: SelectSubset<T, KosFacilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KosFacilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KosFacilities
     * const kosFacilities = await prisma.kosFacility.findMany()
     * 
     * // Get first 10 KosFacilities
     * const kosFacilities = await prisma.kosFacility.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kosFacilityWithIdOnly = await prisma.kosFacility.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KosFacilityFindManyArgs>(args?: SelectSubset<T, KosFacilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KosFacility.
     * @param {KosFacilityCreateArgs} args - Arguments to create a KosFacility.
     * @example
     * // Create one KosFacility
     * const KosFacility = await prisma.kosFacility.create({
     *   data: {
     *     // ... data to create a KosFacility
     *   }
     * })
     * 
     */
    create<T extends KosFacilityCreateArgs>(args: SelectSubset<T, KosFacilityCreateArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KosFacilities.
     * @param {KosFacilityCreateManyArgs} args - Arguments to create many KosFacilities.
     * @example
     * // Create many KosFacilities
     * const kosFacility = await prisma.kosFacility.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KosFacilityCreateManyArgs>(args?: SelectSubset<T, KosFacilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KosFacility.
     * @param {KosFacilityDeleteArgs} args - Arguments to delete one KosFacility.
     * @example
     * // Delete one KosFacility
     * const KosFacility = await prisma.kosFacility.delete({
     *   where: {
     *     // ... filter to delete one KosFacility
     *   }
     * })
     * 
     */
    delete<T extends KosFacilityDeleteArgs>(args: SelectSubset<T, KosFacilityDeleteArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KosFacility.
     * @param {KosFacilityUpdateArgs} args - Arguments to update one KosFacility.
     * @example
     * // Update one KosFacility
     * const kosFacility = await prisma.kosFacility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KosFacilityUpdateArgs>(args: SelectSubset<T, KosFacilityUpdateArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KosFacilities.
     * @param {KosFacilityDeleteManyArgs} args - Arguments to filter KosFacilities to delete.
     * @example
     * // Delete a few KosFacilities
     * const { count } = await prisma.kosFacility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KosFacilityDeleteManyArgs>(args?: SelectSubset<T, KosFacilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KosFacilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KosFacilities
     * const kosFacility = await prisma.kosFacility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KosFacilityUpdateManyArgs>(args: SelectSubset<T, KosFacilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KosFacility.
     * @param {KosFacilityUpsertArgs} args - Arguments to update or create a KosFacility.
     * @example
     * // Update or create a KosFacility
     * const kosFacility = await prisma.kosFacility.upsert({
     *   create: {
     *     // ... data to create a KosFacility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KosFacility we want to update
     *   }
     * })
     */
    upsert<T extends KosFacilityUpsertArgs>(args: SelectSubset<T, KosFacilityUpsertArgs<ExtArgs>>): Prisma__KosFacilityClient<$Result.GetResult<Prisma.$KosFacilityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KosFacilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityCountArgs} args - Arguments to filter KosFacilities to count.
     * @example
     * // Count the number of KosFacilities
     * const count = await prisma.kosFacility.count({
     *   where: {
     *     // ... the filter for the KosFacilities we want to count
     *   }
     * })
    **/
    count<T extends KosFacilityCountArgs>(
      args?: Subset<T, KosFacilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KosFacilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KosFacility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KosFacilityAggregateArgs>(args: Subset<T, KosFacilityAggregateArgs>): Prisma.PrismaPromise<GetKosFacilityAggregateType<T>>

    /**
     * Group by KosFacility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KosFacilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KosFacilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KosFacilityGroupByArgs['orderBy'] }
        : { orderBy?: KosFacilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KosFacilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKosFacilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KosFacility model
   */
  readonly fields: KosFacilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KosFacility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KosFacilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KosFacility model
   */ 
  interface KosFacilityFieldRefs {
    readonly id: FieldRef<"KosFacility", 'Int'>
    readonly uuid: FieldRef<"KosFacility", 'String'>
    readonly kosId: FieldRef<"KosFacility", 'Int'>
    readonly facility: FieldRef<"KosFacility", 'String'>
    readonly createdAt: FieldRef<"KosFacility", 'DateTime'>
    readonly updatedAt: FieldRef<"KosFacility", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KosFacility findUnique
   */
  export type KosFacilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter, which KosFacility to fetch.
     */
    where: KosFacilityWhereUniqueInput
  }

  /**
   * KosFacility findUniqueOrThrow
   */
  export type KosFacilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter, which KosFacility to fetch.
     */
    where: KosFacilityWhereUniqueInput
  }

  /**
   * KosFacility findFirst
   */
  export type KosFacilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter, which KosFacility to fetch.
     */
    where?: KosFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosFacilities to fetch.
     */
    orderBy?: KosFacilityOrderByWithRelationInput | KosFacilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KosFacilities.
     */
    cursor?: KosFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosFacilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosFacilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KosFacilities.
     */
    distinct?: KosFacilityScalarFieldEnum | KosFacilityScalarFieldEnum[]
  }

  /**
   * KosFacility findFirstOrThrow
   */
  export type KosFacilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter, which KosFacility to fetch.
     */
    where?: KosFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosFacilities to fetch.
     */
    orderBy?: KosFacilityOrderByWithRelationInput | KosFacilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KosFacilities.
     */
    cursor?: KosFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosFacilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosFacilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KosFacilities.
     */
    distinct?: KosFacilityScalarFieldEnum | KosFacilityScalarFieldEnum[]
  }

  /**
   * KosFacility findMany
   */
  export type KosFacilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter, which KosFacilities to fetch.
     */
    where?: KosFacilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KosFacilities to fetch.
     */
    orderBy?: KosFacilityOrderByWithRelationInput | KosFacilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KosFacilities.
     */
    cursor?: KosFacilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KosFacilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KosFacilities.
     */
    skip?: number
    distinct?: KosFacilityScalarFieldEnum | KosFacilityScalarFieldEnum[]
  }

  /**
   * KosFacility create
   */
  export type KosFacilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * The data needed to create a KosFacility.
     */
    data: XOR<KosFacilityCreateInput, KosFacilityUncheckedCreateInput>
  }

  /**
   * KosFacility createMany
   */
  export type KosFacilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KosFacilities.
     */
    data: KosFacilityCreateManyInput | KosFacilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KosFacility update
   */
  export type KosFacilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * The data needed to update a KosFacility.
     */
    data: XOR<KosFacilityUpdateInput, KosFacilityUncheckedUpdateInput>
    /**
     * Choose, which KosFacility to update.
     */
    where: KosFacilityWhereUniqueInput
  }

  /**
   * KosFacility updateMany
   */
  export type KosFacilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KosFacilities.
     */
    data: XOR<KosFacilityUpdateManyMutationInput, KosFacilityUncheckedUpdateManyInput>
    /**
     * Filter which KosFacilities to update
     */
    where?: KosFacilityWhereInput
  }

  /**
   * KosFacility upsert
   */
  export type KosFacilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * The filter to search for the KosFacility to update in case it exists.
     */
    where: KosFacilityWhereUniqueInput
    /**
     * In case the KosFacility found by the `where` argument doesn't exist, create a new KosFacility with this data.
     */
    create: XOR<KosFacilityCreateInput, KosFacilityUncheckedCreateInput>
    /**
     * In case the KosFacility was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KosFacilityUpdateInput, KosFacilityUncheckedUpdateInput>
  }

  /**
   * KosFacility delete
   */
  export type KosFacilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
    /**
     * Filter which KosFacility to delete.
     */
    where: KosFacilityWhereUniqueInput
  }

  /**
   * KosFacility deleteMany
   */
  export type KosFacilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KosFacilities to delete
     */
    where?: KosFacilityWhereInput
  }

  /**
   * KosFacility without action
   */
  export type KosFacilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KosFacility
     */
    select?: KosFacilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KosFacilityInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    userId: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    userId: number
    comment: string
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>


  export type ReviewSelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      userId: number
      comment: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly uuid: FieldRef<"Review", 'String'>
    readonly kosId: FieldRef<"Review", 'Int'>
    readonly userId: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Book
   */

  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
    durationMonths: number | null
  }

  export type BookSumAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
    durationMonths: number | null
  }

  export type BookMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    payment: $Enums.Payment | null
    startDate: Date | null
    endDate: Date | null
    durationMonths: number | null
    status: $Enums.BookStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    payment: $Enums.Payment | null
    startDate: Date | null
    endDate: Date | null
    durationMonths: number | null
    status: $Enums.BookStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    userId: number
    payment: number
    startDate: number
    endDate: number
    durationMonths: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
    durationMonths?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
    durationMonths?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    payment?: true
    startDate?: true
    endDate?: true
    durationMonths?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    payment?: true
    startDate?: true
    endDate?: true
    durationMonths?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    payment?: true
    startDate?: true
    endDate?: true
    durationMonths?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Book to aggregate.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
    orderBy?: BookOrderByWithAggregationInput | BookOrderByWithAggregationInput[]
    by: BookScalarFieldEnum[] | BookScalarFieldEnum
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }

  export type BookGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    userId: number
    payment: $Enums.Payment
    startDate: Date
    endDate: Date
    durationMonths: number
    status: $Enums.BookStatus
    createdAt: Date
    updatedAt: Date
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    payment?: boolean
    startDate?: boolean
    endDate?: boolean
    durationMonths?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookingCalendar?: boolean | Book$bookingCalendarArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>


  export type BookSelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    payment?: boolean
    startDate?: boolean
    endDate?: boolean
    durationMonths?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookingCalendar?: boolean | Book$bookingCalendarArgs<ExtArgs>
  }

  export type $BookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Book"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      bookingCalendar: Prisma.$BookingCalendarPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      userId: number
      payment: $Enums.Payment
      startDate: Date
      endDate: Date
      durationMonths: number
      status: $Enums.BookStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["book"]>
    composites: {}
  }

  type BookGetPayload<S extends boolean | null | undefined | BookDefaultArgs> = $Result.GetResult<Prisma.$BookPayload, S>

  type BookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookCountAggregateInputType | true
    }

  export interface BookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Book'], meta: { name: 'Book' } }
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookFindUniqueArgs>(args: SelectSubset<T, BookFindUniqueArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Book that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(args: SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookFindFirstArgs>(args?: SelectSubset<T, BookFindFirstArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Book that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(args?: SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookFindManyArgs>(args?: SelectSubset<T, BookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
     */
    create<T extends BookCreateArgs>(args: SelectSubset<T, BookCreateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Books.
     * @param {BookCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookCreateManyArgs>(args?: SelectSubset<T, BookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
     */
    delete<T extends BookDeleteArgs>(args: SelectSubset<T, BookDeleteArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookUpdateArgs>(args: SelectSubset<T, BookUpdateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookDeleteManyArgs>(args?: SelectSubset<T, BookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookUpdateManyArgs>(args: SelectSubset<T, BookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
     */
    upsert<T extends BookUpsertArgs>(args: SelectSubset<T, BookUpsertArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    bookingCalendar<T extends Book$bookingCalendarArgs<ExtArgs> = {}>(args?: Subset<T, Book$bookingCalendarArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Book model
   */ 
  interface BookFieldRefs {
    readonly id: FieldRef<"Book", 'Int'>
    readonly uuid: FieldRef<"Book", 'String'>
    readonly kosId: FieldRef<"Book", 'Int'>
    readonly userId: FieldRef<"Book", 'Int'>
    readonly payment: FieldRef<"Book", 'Payment'>
    readonly startDate: FieldRef<"Book", 'DateTime'>
    readonly endDate: FieldRef<"Book", 'DateTime'>
    readonly durationMonths: FieldRef<"Book", 'Int'>
    readonly status: FieldRef<"Book", 'BookStatus'>
    readonly createdAt: FieldRef<"Book", 'DateTime'>
    readonly updatedAt: FieldRef<"Book", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findFirst
   */
  export type BookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findMany
   */
  export type BookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book create
   */
  export type BookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to create a Book.
     */
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }

  /**
   * Book createMany
   */
  export type BookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Book update
   */
  export type BookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to update a Book.
     */
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
  }

  /**
   * Book upsert
   */
  export type BookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The filter to search for the Book to update in case it exists.
     */
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     */
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }

  /**
   * Book delete
   */
  export type BookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter which Book to delete.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BookWhereInput
  }

  /**
   * Book.bookingCalendar
   */
  export type Book$bookingCalendarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    where?: BookingCalendarWhereInput
  }

  /**
   * Book without action
   */
  export type BookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
  }

  export type LikeSumAggregateOutputType = {
    id: number | null
    kosId: number | null
    userId: number | null
  }

  export type LikeMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    kosId?: true
    userId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _avg?: LikeAvgAggregateInputType
    _sum?: LikeSumAggregateInputType
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>


  export type LikeSelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeFindManyArgs>(args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
     */
    create<T extends LikeCreateArgs>(args: SelectSubset<T, LikeCreateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeCreateManyArgs>(args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
     */
    delete<T extends LikeDeleteArgs>(args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUpdateArgs>(args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDeleteManyArgs>(args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUpdateManyArgs>(args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Like model
   */ 
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'Int'>
    readonly uuid: FieldRef<"Like", 'String'>
    readonly kosId: FieldRef<"Like", 'Int'>
    readonly userId: FieldRef<"Like", 'Int'>
    readonly createdAt: FieldRef<"Like", 'DateTime'>
    readonly updatedAt: FieldRef<"Like", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    relatedId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    relatedId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    relatedId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    relatedId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    uuid: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    relatedId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    relatedId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    relatedId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    relatedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    relatedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    uuid?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    relatedId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    uuid: string
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    relatedId: number | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    relatedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    uuid?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    relatedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      userId: number
      title: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      relatedId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly uuid: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly relatedId: FieldRef<"Notification", 'Int'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model BookingCalendar
   */

  export type AggregateBookingCalendar = {
    _count: BookingCalendarCountAggregateOutputType | null
    _avg: BookingCalendarAvgAggregateOutputType | null
    _sum: BookingCalendarSumAggregateOutputType | null
    _min: BookingCalendarMinAggregateOutputType | null
    _max: BookingCalendarMaxAggregateOutputType | null
  }

  export type BookingCalendarAvgAggregateOutputType = {
    id: number | null
    kosId: number | null
    bookId: number | null
  }

  export type BookingCalendarSumAggregateOutputType = {
    id: number | null
    kosId: number | null
    bookId: number | null
  }

  export type BookingCalendarMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    bookId: number | null
    date: Date | null
    isAvailable: boolean | null
    isBooked: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingCalendarMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    kosId: number | null
    bookId: number | null
    date: Date | null
    isAvailable: boolean | null
    isBooked: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingCalendarCountAggregateOutputType = {
    id: number
    uuid: number
    kosId: number
    bookId: number
    date: number
    isAvailable: number
    isBooked: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingCalendarAvgAggregateInputType = {
    id?: true
    kosId?: true
    bookId?: true
  }

  export type BookingCalendarSumAggregateInputType = {
    id?: true
    kosId?: true
    bookId?: true
  }

  export type BookingCalendarMinAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    bookId?: true
    date?: true
    isAvailable?: true
    isBooked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingCalendarMaxAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    bookId?: true
    date?: true
    isAvailable?: true
    isBooked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingCalendarCountAggregateInputType = {
    id?: true
    uuid?: true
    kosId?: true
    bookId?: true
    date?: true
    isAvailable?: true
    isBooked?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingCalendarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingCalendar to aggregate.
     */
    where?: BookingCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingCalendars to fetch.
     */
    orderBy?: BookingCalendarOrderByWithRelationInput | BookingCalendarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingCalendars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingCalendars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingCalendars
    **/
    _count?: true | BookingCalendarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingCalendarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingCalendarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingCalendarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingCalendarMaxAggregateInputType
  }

  export type GetBookingCalendarAggregateType<T extends BookingCalendarAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingCalendar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingCalendar[P]>
      : GetScalarType<T[P], AggregateBookingCalendar[P]>
  }




  export type BookingCalendarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingCalendarWhereInput
    orderBy?: BookingCalendarOrderByWithAggregationInput | BookingCalendarOrderByWithAggregationInput[]
    by: BookingCalendarScalarFieldEnum[] | BookingCalendarScalarFieldEnum
    having?: BookingCalendarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCalendarCountAggregateInputType | true
    _avg?: BookingCalendarAvgAggregateInputType
    _sum?: BookingCalendarSumAggregateInputType
    _min?: BookingCalendarMinAggregateInputType
    _max?: BookingCalendarMaxAggregateInputType
  }

  export type BookingCalendarGroupByOutputType = {
    id: number
    uuid: string
    kosId: number
    bookId: number | null
    date: Date
    isAvailable: boolean
    isBooked: boolean
    createdAt: Date
    updatedAt: Date
    _count: BookingCalendarCountAggregateOutputType | null
    _avg: BookingCalendarAvgAggregateOutputType | null
    _sum: BookingCalendarSumAggregateOutputType | null
    _min: BookingCalendarMinAggregateOutputType | null
    _max: BookingCalendarMaxAggregateOutputType | null
  }

  type GetBookingCalendarGroupByPayload<T extends BookingCalendarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingCalendarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingCalendarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingCalendarGroupByOutputType[P]>
            : GetScalarType<T[P], BookingCalendarGroupByOutputType[P]>
        }
      >
    >


  export type BookingCalendarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    bookId?: boolean
    date?: boolean
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kos?: boolean | KosDefaultArgs<ExtArgs>
    book?: boolean | BookingCalendar$bookArgs<ExtArgs>
  }, ExtArgs["result"]["bookingCalendar"]>


  export type BookingCalendarSelectScalar = {
    id?: boolean
    uuid?: boolean
    kosId?: boolean
    bookId?: boolean
    date?: boolean
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingCalendarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kos?: boolean | KosDefaultArgs<ExtArgs>
    book?: boolean | BookingCalendar$bookArgs<ExtArgs>
  }

  export type $BookingCalendarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookingCalendar"
    objects: {
      kos: Prisma.$KosPayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uuid: string
      kosId: number
      bookId: number | null
      date: Date
      isAvailable: boolean
      isBooked: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookingCalendar"]>
    composites: {}
  }

  type BookingCalendarGetPayload<S extends boolean | null | undefined | BookingCalendarDefaultArgs> = $Result.GetResult<Prisma.$BookingCalendarPayload, S>

  type BookingCalendarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookingCalendarFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookingCalendarCountAggregateInputType | true
    }

  export interface BookingCalendarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingCalendar'], meta: { name: 'BookingCalendar' } }
    /**
     * Find zero or one BookingCalendar that matches the filter.
     * @param {BookingCalendarFindUniqueArgs} args - Arguments to find a BookingCalendar
     * @example
     * // Get one BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingCalendarFindUniqueArgs>(args: SelectSubset<T, BookingCalendarFindUniqueArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BookingCalendar that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookingCalendarFindUniqueOrThrowArgs} args - Arguments to find a BookingCalendar
     * @example
     * // Get one BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingCalendarFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingCalendarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BookingCalendar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarFindFirstArgs} args - Arguments to find a BookingCalendar
     * @example
     * // Get one BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingCalendarFindFirstArgs>(args?: SelectSubset<T, BookingCalendarFindFirstArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BookingCalendar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarFindFirstOrThrowArgs} args - Arguments to find a BookingCalendar
     * @example
     * // Get one BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingCalendarFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingCalendarFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BookingCalendars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingCalendars
     * const bookingCalendars = await prisma.bookingCalendar.findMany()
     * 
     * // Get first 10 BookingCalendars
     * const bookingCalendars = await prisma.bookingCalendar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingCalendarWithIdOnly = await prisma.bookingCalendar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingCalendarFindManyArgs>(args?: SelectSubset<T, BookingCalendarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BookingCalendar.
     * @param {BookingCalendarCreateArgs} args - Arguments to create a BookingCalendar.
     * @example
     * // Create one BookingCalendar
     * const BookingCalendar = await prisma.bookingCalendar.create({
     *   data: {
     *     // ... data to create a BookingCalendar
     *   }
     * })
     * 
     */
    create<T extends BookingCalendarCreateArgs>(args: SelectSubset<T, BookingCalendarCreateArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BookingCalendars.
     * @param {BookingCalendarCreateManyArgs} args - Arguments to create many BookingCalendars.
     * @example
     * // Create many BookingCalendars
     * const bookingCalendar = await prisma.bookingCalendar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCalendarCreateManyArgs>(args?: SelectSubset<T, BookingCalendarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookingCalendar.
     * @param {BookingCalendarDeleteArgs} args - Arguments to delete one BookingCalendar.
     * @example
     * // Delete one BookingCalendar
     * const BookingCalendar = await prisma.bookingCalendar.delete({
     *   where: {
     *     // ... filter to delete one BookingCalendar
     *   }
     * })
     * 
     */
    delete<T extends BookingCalendarDeleteArgs>(args: SelectSubset<T, BookingCalendarDeleteArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BookingCalendar.
     * @param {BookingCalendarUpdateArgs} args - Arguments to update one BookingCalendar.
     * @example
     * // Update one BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingCalendarUpdateArgs>(args: SelectSubset<T, BookingCalendarUpdateArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BookingCalendars.
     * @param {BookingCalendarDeleteManyArgs} args - Arguments to filter BookingCalendars to delete.
     * @example
     * // Delete a few BookingCalendars
     * const { count } = await prisma.bookingCalendar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingCalendarDeleteManyArgs>(args?: SelectSubset<T, BookingCalendarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingCalendars
     * const bookingCalendar = await prisma.bookingCalendar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingCalendarUpdateManyArgs>(args: SelectSubset<T, BookingCalendarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookingCalendar.
     * @param {BookingCalendarUpsertArgs} args - Arguments to update or create a BookingCalendar.
     * @example
     * // Update or create a BookingCalendar
     * const bookingCalendar = await prisma.bookingCalendar.upsert({
     *   create: {
     *     // ... data to create a BookingCalendar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingCalendar we want to update
     *   }
     * })
     */
    upsert<T extends BookingCalendarUpsertArgs>(args: SelectSubset<T, BookingCalendarUpsertArgs<ExtArgs>>): Prisma__BookingCalendarClient<$Result.GetResult<Prisma.$BookingCalendarPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BookingCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarCountArgs} args - Arguments to filter BookingCalendars to count.
     * @example
     * // Count the number of BookingCalendars
     * const count = await prisma.bookingCalendar.count({
     *   where: {
     *     // ... the filter for the BookingCalendars we want to count
     *   }
     * })
    **/
    count<T extends BookingCalendarCountArgs>(
      args?: Subset<T, BookingCalendarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCalendarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingCalendarAggregateArgs>(args: Subset<T, BookingCalendarAggregateArgs>): Prisma.PrismaPromise<GetBookingCalendarAggregateType<T>>

    /**
     * Group by BookingCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCalendarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingCalendarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingCalendarGroupByArgs['orderBy'] }
        : { orderBy?: BookingCalendarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingCalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingCalendarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookingCalendar model
   */
  readonly fields: BookingCalendarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingCalendar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingCalendarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kos<T extends KosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KosDefaultArgs<ExtArgs>>): Prisma__KosClient<$Result.GetResult<Prisma.$KosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    book<T extends BookingCalendar$bookArgs<ExtArgs> = {}>(args?: Subset<T, BookingCalendar$bookArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookingCalendar model
   */ 
  interface BookingCalendarFieldRefs {
    readonly id: FieldRef<"BookingCalendar", 'Int'>
    readonly uuid: FieldRef<"BookingCalendar", 'String'>
    readonly kosId: FieldRef<"BookingCalendar", 'Int'>
    readonly bookId: FieldRef<"BookingCalendar", 'Int'>
    readonly date: FieldRef<"BookingCalendar", 'DateTime'>
    readonly isAvailable: FieldRef<"BookingCalendar", 'Boolean'>
    readonly isBooked: FieldRef<"BookingCalendar", 'Boolean'>
    readonly createdAt: FieldRef<"BookingCalendar", 'DateTime'>
    readonly updatedAt: FieldRef<"BookingCalendar", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookingCalendar findUnique
   */
  export type BookingCalendarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter, which BookingCalendar to fetch.
     */
    where: BookingCalendarWhereUniqueInput
  }

  /**
   * BookingCalendar findUniqueOrThrow
   */
  export type BookingCalendarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter, which BookingCalendar to fetch.
     */
    where: BookingCalendarWhereUniqueInput
  }

  /**
   * BookingCalendar findFirst
   */
  export type BookingCalendarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter, which BookingCalendar to fetch.
     */
    where?: BookingCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingCalendars to fetch.
     */
    orderBy?: BookingCalendarOrderByWithRelationInput | BookingCalendarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingCalendars.
     */
    cursor?: BookingCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingCalendars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingCalendars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingCalendars.
     */
    distinct?: BookingCalendarScalarFieldEnum | BookingCalendarScalarFieldEnum[]
  }

  /**
   * BookingCalendar findFirstOrThrow
   */
  export type BookingCalendarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter, which BookingCalendar to fetch.
     */
    where?: BookingCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingCalendars to fetch.
     */
    orderBy?: BookingCalendarOrderByWithRelationInput | BookingCalendarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingCalendars.
     */
    cursor?: BookingCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingCalendars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingCalendars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingCalendars.
     */
    distinct?: BookingCalendarScalarFieldEnum | BookingCalendarScalarFieldEnum[]
  }

  /**
   * BookingCalendar findMany
   */
  export type BookingCalendarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter, which BookingCalendars to fetch.
     */
    where?: BookingCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingCalendars to fetch.
     */
    orderBy?: BookingCalendarOrderByWithRelationInput | BookingCalendarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingCalendars.
     */
    cursor?: BookingCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingCalendars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingCalendars.
     */
    skip?: number
    distinct?: BookingCalendarScalarFieldEnum | BookingCalendarScalarFieldEnum[]
  }

  /**
   * BookingCalendar create
   */
  export type BookingCalendarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * The data needed to create a BookingCalendar.
     */
    data: XOR<BookingCalendarCreateInput, BookingCalendarUncheckedCreateInput>
  }

  /**
   * BookingCalendar createMany
   */
  export type BookingCalendarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookingCalendars.
     */
    data: BookingCalendarCreateManyInput | BookingCalendarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookingCalendar update
   */
  export type BookingCalendarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * The data needed to update a BookingCalendar.
     */
    data: XOR<BookingCalendarUpdateInput, BookingCalendarUncheckedUpdateInput>
    /**
     * Choose, which BookingCalendar to update.
     */
    where: BookingCalendarWhereUniqueInput
  }

  /**
   * BookingCalendar updateMany
   */
  export type BookingCalendarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookingCalendars.
     */
    data: XOR<BookingCalendarUpdateManyMutationInput, BookingCalendarUncheckedUpdateManyInput>
    /**
     * Filter which BookingCalendars to update
     */
    where?: BookingCalendarWhereInput
  }

  /**
   * BookingCalendar upsert
   */
  export type BookingCalendarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * The filter to search for the BookingCalendar to update in case it exists.
     */
    where: BookingCalendarWhereUniqueInput
    /**
     * In case the BookingCalendar found by the `where` argument doesn't exist, create a new BookingCalendar with this data.
     */
    create: XOR<BookingCalendarCreateInput, BookingCalendarUncheckedCreateInput>
    /**
     * In case the BookingCalendar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingCalendarUpdateInput, BookingCalendarUncheckedUpdateInput>
  }

  /**
   * BookingCalendar delete
   */
  export type BookingCalendarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
    /**
     * Filter which BookingCalendar to delete.
     */
    where: BookingCalendarWhereUniqueInput
  }

  /**
   * BookingCalendar deleteMany
   */
  export type BookingCalendarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingCalendars to delete
     */
    where?: BookingCalendarWhereInput
  }

  /**
   * BookingCalendar.book
   */
  export type BookingCalendar$bookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
  }

  /**
   * BookingCalendar without action
   */
  export type BookingCalendarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCalendar
     */
    select?: BookingCalendarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingCalendarInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    name: 'name',
    email: 'email',
    password: 'password',
    phone: 'phone',
    profile_picture: 'profile_picture',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KosScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    userId: 'userId',
    name: 'name',
    address: 'address',
    pricePerMonth: 'pricePerMonth',
    discountPercent: 'discountPercent',
    discountEndDate: 'discountEndDate',
    gender: 'gender',
    kampus: 'kampus',
    kota: 'kota',
    kalender: 'kalender',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KosScalarFieldEnum = (typeof KosScalarFieldEnum)[keyof typeof KosScalarFieldEnum]


  export const KosImageScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    file: 'file',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KosImageScalarFieldEnum = (typeof KosImageScalarFieldEnum)[keyof typeof KosImageScalarFieldEnum]


  export const KosFacilityScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    facility: 'facility',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KosFacilityScalarFieldEnum = (typeof KosFacilityScalarFieldEnum)[keyof typeof KosFacilityScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    userId: 'userId',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    userId: 'userId',
    payment: 'payment',
    startDate: 'startDate',
    endDate: 'endDate',
    durationMonths: 'durationMonths',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    relatedId: 'relatedId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const BookingCalendarScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    kosId: 'kosId',
    bookId: 'bookId',
    date: 'date',
    isAvailable: 'isAvailable',
    isBooked: 'isBooked',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingCalendarScalarFieldEnum = (typeof BookingCalendarScalarFieldEnum)[keyof typeof BookingCalendarScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Kampus'
   */
  export type EnumKampusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Kampus'>
    


  /**
   * Reference to a field of type 'Kota'
   */
  export type EnumKotaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Kota'>
    


  /**
   * Reference to a field of type 'Kalender'
   */
  export type EnumKalenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Kalender'>
    


  /**
   * Reference to a field of type 'Payment'
   */
  export type EnumPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Payment'>
    


  /**
   * Reference to a field of type 'BookStatus'
   */
  export type EnumBookStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookStatus'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    uuid?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    profile_picture?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    kos?: KosListRelationFilter
    reviews?: ReviewListRelationFilter
    books?: BookListRelationFilter
    likes?: LikeListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    books?: BookOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    profile_picture?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    kos?: KosListRelationFilter
    reviews?: ReviewListRelationFilter
    books?: BookListRelationFilter
    likes?: LikeListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "uuid" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    uuid?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    profile_picture?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type KosWhereInput = {
    AND?: KosWhereInput | KosWhereInput[]
    OR?: KosWhereInput[]
    NOT?: KosWhereInput | KosWhereInput[]
    id?: IntFilter<"Kos"> | number
    uuid?: StringFilter<"Kos"> | string
    userId?: IntFilter<"Kos"> | number
    name?: StringFilter<"Kos"> | string
    address?: StringFilter<"Kos"> | string
    pricePerMonth?: FloatFilter<"Kos"> | number
    discountPercent?: FloatNullableFilter<"Kos"> | number | null
    discountEndDate?: DateTimeNullableFilter<"Kos"> | Date | string | null
    gender?: EnumGenderFilter<"Kos"> | $Enums.Gender
    kampus?: EnumKampusFilter<"Kos"> | $Enums.Kampus
    kota?: EnumKotaFilter<"Kos"> | $Enums.Kota
    kalender?: EnumKalenderFilter<"Kos"> | $Enums.Kalender
    createdAt?: DateTimeFilter<"Kos"> | Date | string
    updatedAt?: DateTimeFilter<"Kos"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    images?: KosImageListRelationFilter
    facilities?: KosFacilityListRelationFilter
    reviews?: ReviewListRelationFilter
    books?: BookListRelationFilter
    likes?: LikeListRelationFilter
    bookingCalendar?: BookingCalendarListRelationFilter
  }

  export type KosOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrderInput | SortOrder
    discountEndDate?: SortOrderInput | SortOrder
    gender?: SortOrder
    kampus?: SortOrder
    kota?: SortOrder
    kalender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    images?: KosImageOrderByRelationAggregateInput
    facilities?: KosFacilityOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    books?: BookOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
    bookingCalendar?: BookingCalendarOrderByRelationAggregateInput
  }

  export type KosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: KosWhereInput | KosWhereInput[]
    OR?: KosWhereInput[]
    NOT?: KosWhereInput | KosWhereInput[]
    userId?: IntFilter<"Kos"> | number
    name?: StringFilter<"Kos"> | string
    address?: StringFilter<"Kos"> | string
    pricePerMonth?: FloatFilter<"Kos"> | number
    discountPercent?: FloatNullableFilter<"Kos"> | number | null
    discountEndDate?: DateTimeNullableFilter<"Kos"> | Date | string | null
    gender?: EnumGenderFilter<"Kos"> | $Enums.Gender
    kampus?: EnumKampusFilter<"Kos"> | $Enums.Kampus
    kota?: EnumKotaFilter<"Kos"> | $Enums.Kota
    kalender?: EnumKalenderFilter<"Kos"> | $Enums.Kalender
    createdAt?: DateTimeFilter<"Kos"> | Date | string
    updatedAt?: DateTimeFilter<"Kos"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    images?: KosImageListRelationFilter
    facilities?: KosFacilityListRelationFilter
    reviews?: ReviewListRelationFilter
    books?: BookListRelationFilter
    likes?: LikeListRelationFilter
    bookingCalendar?: BookingCalendarListRelationFilter
  }, "id" | "uuid">

  export type KosOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrderInput | SortOrder
    discountEndDate?: SortOrderInput | SortOrder
    gender?: SortOrder
    kampus?: SortOrder
    kota?: SortOrder
    kalender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KosCountOrderByAggregateInput
    _avg?: KosAvgOrderByAggregateInput
    _max?: KosMaxOrderByAggregateInput
    _min?: KosMinOrderByAggregateInput
    _sum?: KosSumOrderByAggregateInput
  }

  export type KosScalarWhereWithAggregatesInput = {
    AND?: KosScalarWhereWithAggregatesInput | KosScalarWhereWithAggregatesInput[]
    OR?: KosScalarWhereWithAggregatesInput[]
    NOT?: KosScalarWhereWithAggregatesInput | KosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kos"> | number
    uuid?: StringWithAggregatesFilter<"Kos"> | string
    userId?: IntWithAggregatesFilter<"Kos"> | number
    name?: StringWithAggregatesFilter<"Kos"> | string
    address?: StringWithAggregatesFilter<"Kos"> | string
    pricePerMonth?: FloatWithAggregatesFilter<"Kos"> | number
    discountPercent?: FloatNullableWithAggregatesFilter<"Kos"> | number | null
    discountEndDate?: DateTimeNullableWithAggregatesFilter<"Kos"> | Date | string | null
    gender?: EnumGenderWithAggregatesFilter<"Kos"> | $Enums.Gender
    kampus?: EnumKampusWithAggregatesFilter<"Kos"> | $Enums.Kampus
    kota?: EnumKotaWithAggregatesFilter<"Kos"> | $Enums.Kota
    kalender?: EnumKalenderWithAggregatesFilter<"Kos"> | $Enums.Kalender
    createdAt?: DateTimeWithAggregatesFilter<"Kos"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Kos"> | Date | string
  }

  export type KosImageWhereInput = {
    AND?: KosImageWhereInput | KosImageWhereInput[]
    OR?: KosImageWhereInput[]
    NOT?: KosImageWhereInput | KosImageWhereInput[]
    id?: IntFilter<"KosImage"> | number
    uuid?: StringFilter<"KosImage"> | string
    kosId?: IntFilter<"KosImage"> | number
    file?: StringFilter<"KosImage"> | string
    createdAt?: DateTimeFilter<"KosImage"> | Date | string
    updatedAt?: DateTimeFilter<"KosImage"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
  }

  export type KosImageOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    file?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
  }

  export type KosImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: KosImageWhereInput | KosImageWhereInput[]
    OR?: KosImageWhereInput[]
    NOT?: KosImageWhereInput | KosImageWhereInput[]
    kosId?: IntFilter<"KosImage"> | number
    file?: StringFilter<"KosImage"> | string
    createdAt?: DateTimeFilter<"KosImage"> | Date | string
    updatedAt?: DateTimeFilter<"KosImage"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
  }, "id" | "uuid">

  export type KosImageOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    file?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KosImageCountOrderByAggregateInput
    _avg?: KosImageAvgOrderByAggregateInput
    _max?: KosImageMaxOrderByAggregateInput
    _min?: KosImageMinOrderByAggregateInput
    _sum?: KosImageSumOrderByAggregateInput
  }

  export type KosImageScalarWhereWithAggregatesInput = {
    AND?: KosImageScalarWhereWithAggregatesInput | KosImageScalarWhereWithAggregatesInput[]
    OR?: KosImageScalarWhereWithAggregatesInput[]
    NOT?: KosImageScalarWhereWithAggregatesInput | KosImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KosImage"> | number
    uuid?: StringWithAggregatesFilter<"KosImage"> | string
    kosId?: IntWithAggregatesFilter<"KosImage"> | number
    file?: StringWithAggregatesFilter<"KosImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KosImage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KosImage"> | Date | string
  }

  export type KosFacilityWhereInput = {
    AND?: KosFacilityWhereInput | KosFacilityWhereInput[]
    OR?: KosFacilityWhereInput[]
    NOT?: KosFacilityWhereInput | KosFacilityWhereInput[]
    id?: IntFilter<"KosFacility"> | number
    uuid?: StringFilter<"KosFacility"> | string
    kosId?: IntFilter<"KosFacility"> | number
    facility?: StringFilter<"KosFacility"> | string
    createdAt?: DateTimeFilter<"KosFacility"> | Date | string
    updatedAt?: DateTimeFilter<"KosFacility"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
  }

  export type KosFacilityOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    facility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
  }

  export type KosFacilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: KosFacilityWhereInput | KosFacilityWhereInput[]
    OR?: KosFacilityWhereInput[]
    NOT?: KosFacilityWhereInput | KosFacilityWhereInput[]
    kosId?: IntFilter<"KosFacility"> | number
    facility?: StringFilter<"KosFacility"> | string
    createdAt?: DateTimeFilter<"KosFacility"> | Date | string
    updatedAt?: DateTimeFilter<"KosFacility"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
  }, "id" | "uuid">

  export type KosFacilityOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    facility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KosFacilityCountOrderByAggregateInput
    _avg?: KosFacilityAvgOrderByAggregateInput
    _max?: KosFacilityMaxOrderByAggregateInput
    _min?: KosFacilityMinOrderByAggregateInput
    _sum?: KosFacilitySumOrderByAggregateInput
  }

  export type KosFacilityScalarWhereWithAggregatesInput = {
    AND?: KosFacilityScalarWhereWithAggregatesInput | KosFacilityScalarWhereWithAggregatesInput[]
    OR?: KosFacilityScalarWhereWithAggregatesInput[]
    NOT?: KosFacilityScalarWhereWithAggregatesInput | KosFacilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KosFacility"> | number
    uuid?: StringWithAggregatesFilter<"KosFacility"> | string
    kosId?: IntWithAggregatesFilter<"KosFacility"> | number
    facility?: StringWithAggregatesFilter<"KosFacility"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KosFacility"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KosFacility"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    uuid?: StringFilter<"Review"> | string
    kosId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    comment?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    kosId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    comment?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "uuid">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    uuid?: StringWithAggregatesFilter<"Review"> | string
    kosId?: IntWithAggregatesFilter<"Review"> | number
    userId?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringWithAggregatesFilter<"Review"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type BookWhereInput = {
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    id?: IntFilter<"Book"> | number
    uuid?: StringFilter<"Book"> | string
    kosId?: IntFilter<"Book"> | number
    userId?: IntFilter<"Book"> | number
    payment?: EnumPaymentFilter<"Book"> | $Enums.Payment
    startDate?: DateTimeFilter<"Book"> | Date | string
    endDate?: DateTimeFilter<"Book"> | Date | string
    durationMonths?: IntFilter<"Book"> | number
    status?: EnumBookStatusFilter<"Book"> | $Enums.BookStatus
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    bookingCalendar?: XOR<BookingCalendarNullableRelationFilter, BookingCalendarWhereInput> | null
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    payment?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    durationMonths?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    bookingCalendar?: BookingCalendarOrderByWithRelationInput
  }

  export type BookWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    kosId?: IntFilter<"Book"> | number
    userId?: IntFilter<"Book"> | number
    payment?: EnumPaymentFilter<"Book"> | $Enums.Payment
    startDate?: DateTimeFilter<"Book"> | Date | string
    endDate?: DateTimeFilter<"Book"> | Date | string
    durationMonths?: IntFilter<"Book"> | number
    status?: EnumBookStatusFilter<"Book"> | $Enums.BookStatus
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    bookingCalendar?: XOR<BookingCalendarNullableRelationFilter, BookingCalendarWhereInput> | null
  }, "id" | "uuid">

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    payment?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    durationMonths?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    OR?: BookScalarWhereWithAggregatesInput[]
    NOT?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Book"> | number
    uuid?: StringWithAggregatesFilter<"Book"> | string
    kosId?: IntWithAggregatesFilter<"Book"> | number
    userId?: IntWithAggregatesFilter<"Book"> | number
    payment?: EnumPaymentWithAggregatesFilter<"Book"> | $Enums.Payment
    startDate?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    durationMonths?: IntWithAggregatesFilter<"Book"> | number
    status?: EnumBookStatusWithAggregatesFilter<"Book"> | $Enums.BookStatus
    createdAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: IntFilter<"Like"> | number
    uuid?: StringFilter<"Like"> | string
    kosId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    updatedAt?: DateTimeFilter<"Like"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    kosId_userId?: LikeKosIdUserIdCompoundUniqueInput
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    kosId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    updatedAt?: DateTimeFilter<"Like"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "uuid" | "kosId_userId">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _avg?: LikeAvgOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
    _sum?: LikeSumOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Like"> | number
    uuid?: StringWithAggregatesFilter<"Like"> | string
    kosId?: IntWithAggregatesFilter<"Like"> | number
    userId?: IntWithAggregatesFilter<"Like"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Like"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    uuid?: StringFilter<"Notification"> | string
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    relatedId?: IntNullableFilter<"Notification"> | number | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    relatedId?: IntNullableFilter<"Notification"> | number | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "uuid">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    uuid?: StringWithAggregatesFilter<"Notification"> | string
    userId?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    relatedId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type BookingCalendarWhereInput = {
    AND?: BookingCalendarWhereInput | BookingCalendarWhereInput[]
    OR?: BookingCalendarWhereInput[]
    NOT?: BookingCalendarWhereInput | BookingCalendarWhereInput[]
    id?: IntFilter<"BookingCalendar"> | number
    uuid?: StringFilter<"BookingCalendar"> | string
    kosId?: IntFilter<"BookingCalendar"> | number
    bookId?: IntNullableFilter<"BookingCalendar"> | number | null
    date?: DateTimeFilter<"BookingCalendar"> | Date | string
    isAvailable?: BoolFilter<"BookingCalendar"> | boolean
    isBooked?: BoolFilter<"BookingCalendar"> | boolean
    createdAt?: DateTimeFilter<"BookingCalendar"> | Date | string
    updatedAt?: DateTimeFilter<"BookingCalendar"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    book?: XOR<BookNullableRelationFilter, BookWhereInput> | null
  }

  export type BookingCalendarOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrderInput | SortOrder
    date?: SortOrder
    isAvailable?: SortOrder
    isBooked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kos?: KosOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
  }

  export type BookingCalendarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    uuid?: string
    bookId?: number
    kosId_date?: BookingCalendarKosIdDateCompoundUniqueInput
    AND?: BookingCalendarWhereInput | BookingCalendarWhereInput[]
    OR?: BookingCalendarWhereInput[]
    NOT?: BookingCalendarWhereInput | BookingCalendarWhereInput[]
    kosId?: IntFilter<"BookingCalendar"> | number
    date?: DateTimeFilter<"BookingCalendar"> | Date | string
    isAvailable?: BoolFilter<"BookingCalendar"> | boolean
    isBooked?: BoolFilter<"BookingCalendar"> | boolean
    createdAt?: DateTimeFilter<"BookingCalendar"> | Date | string
    updatedAt?: DateTimeFilter<"BookingCalendar"> | Date | string
    kos?: XOR<KosRelationFilter, KosWhereInput>
    book?: XOR<BookNullableRelationFilter, BookWhereInput> | null
  }, "id" | "uuid" | "bookId" | "kosId_date">

  export type BookingCalendarOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrderInput | SortOrder
    date?: SortOrder
    isAvailable?: SortOrder
    isBooked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingCalendarCountOrderByAggregateInput
    _avg?: BookingCalendarAvgOrderByAggregateInput
    _max?: BookingCalendarMaxOrderByAggregateInput
    _min?: BookingCalendarMinOrderByAggregateInput
    _sum?: BookingCalendarSumOrderByAggregateInput
  }

  export type BookingCalendarScalarWhereWithAggregatesInput = {
    AND?: BookingCalendarScalarWhereWithAggregatesInput | BookingCalendarScalarWhereWithAggregatesInput[]
    OR?: BookingCalendarScalarWhereWithAggregatesInput[]
    NOT?: BookingCalendarScalarWhereWithAggregatesInput | BookingCalendarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookingCalendar"> | number
    uuid?: StringWithAggregatesFilter<"BookingCalendar"> | string
    kosId?: IntWithAggregatesFilter<"BookingCalendar"> | number
    bookId?: IntNullableWithAggregatesFilter<"BookingCalendar"> | number | null
    date?: DateTimeWithAggregatesFilter<"BookingCalendar"> | Date | string
    isAvailable?: BoolWithAggregatesFilter<"BookingCalendar"> | boolean
    isBooked?: BoolWithAggregatesFilter<"BookingCalendar"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BookingCalendar"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookingCalendar"> | Date | string
  }

  export type UserCreateInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    books?: BookCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    books?: BookUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    books?: BookUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    books?: BookUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosCreateInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type KosCreateManyInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageCreateInput = {
    uuid?: string
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutImagesInput
  }

  export type KosImageUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosImageUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutImagesNestedInput
  }

  export type KosImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosImageUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityCreateInput = {
    uuid?: string
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutFacilitiesInput
  }

  export type KosFacilityUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosFacilityUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutFacilitiesNestedInput
  }

  export type KosFacilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosFacilityUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    uuid?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateInput = {
    uuid?: string
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutBooksInput
    user: UserCreateNestedOneWithoutBooksInput
    bookingCalendar?: BookingCalendarCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingCalendar?: BookingCalendarUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutBooksNestedInput
    user?: UserUpdateOneRequiredWithoutBooksNestedInput
    bookingCalendar?: BookingCalendarUpdateOneWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingCalendar?: BookingCalendarUncheckedUpdateOneWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateInput = {
    uuid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    uuid?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    uuid?: string
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    uuid?: string
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCalendarCreateInput = {
    uuid?: string
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutBookingCalendarInput
    book?: BookCreateNestedOneWithoutBookingCalendarInput
  }

  export type BookingCalendarUncheckedCreateInput = {
    id?: number
    uuid?: string
    kosId: number
    bookId?: number | null
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCalendarUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutBookingCalendarNestedInput
    book?: BookUpdateOneWithoutBookingCalendarNestedInput
  }

  export type BookingCalendarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCalendarCreateManyInput = {
    id?: number
    uuid?: string
    kosId: number
    bookId?: number | null
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCalendarUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCalendarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type KosListRelationFilter = {
    every?: KosWhereInput
    some?: KosWhereInput
    none?: KosWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type KosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    profile_picture?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type EnumKampusFilter<$PrismaModel = never> = {
    equals?: $Enums.Kampus | EnumKampusFieldRefInput<$PrismaModel>
    in?: $Enums.Kampus[]
    notIn?: $Enums.Kampus[]
    not?: NestedEnumKampusFilter<$PrismaModel> | $Enums.Kampus
  }

  export type EnumKotaFilter<$PrismaModel = never> = {
    equals?: $Enums.Kota | EnumKotaFieldRefInput<$PrismaModel>
    in?: $Enums.Kota[]
    notIn?: $Enums.Kota[]
    not?: NestedEnumKotaFilter<$PrismaModel> | $Enums.Kota
  }

  export type EnumKalenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Kalender | EnumKalenderFieldRefInput<$PrismaModel>
    in?: $Enums.Kalender[]
    notIn?: $Enums.Kalender[]
    not?: NestedEnumKalenderFilter<$PrismaModel> | $Enums.Kalender
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KosImageListRelationFilter = {
    every?: KosImageWhereInput
    some?: KosImageWhereInput
    none?: KosImageWhereInput
  }

  export type KosFacilityListRelationFilter = {
    every?: KosFacilityWhereInput
    some?: KosFacilityWhereInput
    none?: KosFacilityWhereInput
  }

  export type BookingCalendarListRelationFilter = {
    every?: BookingCalendarWhereInput
    some?: BookingCalendarWhereInput
    none?: BookingCalendarWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type KosImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KosFacilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingCalendarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KosCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrder
    discountEndDate?: SortOrder
    gender?: SortOrder
    kampus?: SortOrder
    kota?: SortOrder
    kalender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrder
  }

  export type KosMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrder
    discountEndDate?: SortOrder
    gender?: SortOrder
    kampus?: SortOrder
    kota?: SortOrder
    kalender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrder
    discountEndDate?: SortOrder
    gender?: SortOrder
    kampus?: SortOrder
    kota?: SortOrder
    kalender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pricePerMonth?: SortOrder
    discountPercent?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumKampusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kampus | EnumKampusFieldRefInput<$PrismaModel>
    in?: $Enums.Kampus[]
    notIn?: $Enums.Kampus[]
    not?: NestedEnumKampusWithAggregatesFilter<$PrismaModel> | $Enums.Kampus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKampusFilter<$PrismaModel>
    _max?: NestedEnumKampusFilter<$PrismaModel>
  }

  export type EnumKotaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kota | EnumKotaFieldRefInput<$PrismaModel>
    in?: $Enums.Kota[]
    notIn?: $Enums.Kota[]
    not?: NestedEnumKotaWithAggregatesFilter<$PrismaModel> | $Enums.Kota
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKotaFilter<$PrismaModel>
    _max?: NestedEnumKotaFilter<$PrismaModel>
  }

  export type EnumKalenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kalender | EnumKalenderFieldRefInput<$PrismaModel>
    in?: $Enums.Kalender[]
    notIn?: $Enums.Kalender[]
    not?: NestedEnumKalenderWithAggregatesFilter<$PrismaModel> | $Enums.Kalender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKalenderFilter<$PrismaModel>
    _max?: NestedEnumKalenderFilter<$PrismaModel>
  }

  export type KosRelationFilter = {
    is?: KosWhereInput
    isNot?: KosWhereInput
  }

  export type KosImageCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    file?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosImageAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
  }

  export type KosImageMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    file?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosImageMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    file?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosImageSumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
  }

  export type KosFacilityCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    facility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosFacilityAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
  }

  export type KosFacilityMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    facility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosFacilityMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    facility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KosFacilitySumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
  }

  export type EnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[]
    notIn?: $Enums.Payment[]
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type EnumBookStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookStatus | EnumBookStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookStatus[]
    notIn?: $Enums.BookStatus[]
    not?: NestedEnumBookStatusFilter<$PrismaModel> | $Enums.BookStatus
  }

  export type BookingCalendarNullableRelationFilter = {
    is?: BookingCalendarWhereInput | null
    isNot?: BookingCalendarWhereInput | null
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    payment?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    durationMonths?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    durationMonths?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    payment?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    durationMonths?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    payment?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    durationMonths?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    durationMonths?: SortOrder
  }

  export type EnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[]
    notIn?: $Enums.Payment[]
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type EnumBookStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookStatus | EnumBookStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookStatus[]
    notIn?: $Enums.BookStatus[]
    not?: NestedEnumBookStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookStatusFilter<$PrismaModel>
    _max?: NestedEnumBookStatusFilter<$PrismaModel>
  }

  export type LikeKosIdUserIdCompoundUniqueInput = {
    kosId: number
    userId: number
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    userId?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    relatedId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    relatedId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BookNullableRelationFilter = {
    is?: BookWhereInput | null
    isNot?: BookWhereInput | null
  }

  export type BookingCalendarKosIdDateCompoundUniqueInput = {
    kosId: number
    date: Date | string
  }

  export type BookingCalendarCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrder
    date?: SortOrder
    isAvailable?: SortOrder
    isBooked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingCalendarAvgOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrder
  }

  export type BookingCalendarMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrder
    date?: SortOrder
    isAvailable?: SortOrder
    isBooked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingCalendarMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrder
    date?: SortOrder
    isAvailable?: SortOrder
    isBooked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingCalendarSumOrderByAggregateInput = {
    id?: SortOrder
    kosId?: SortOrder
    bookId?: SortOrder
  }

  export type KosCreateNestedManyWithoutOwnerInput = {
    create?: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput> | KosCreateWithoutOwnerInput[] | KosUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: KosCreateOrConnectWithoutOwnerInput | KosCreateOrConnectWithoutOwnerInput[]
    createMany?: KosCreateManyOwnerInputEnvelope
    connect?: KosWhereUniqueInput | KosWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BookCreateNestedManyWithoutUserInput = {
    create?: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput> | BookCreateWithoutUserInput[] | BookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookCreateOrConnectWithoutUserInput | BookCreateOrConnectWithoutUserInput[]
    createMany?: BookCreateManyUserInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type KosUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput> | KosCreateWithoutOwnerInput[] | KosUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: KosCreateOrConnectWithoutOwnerInput | KosCreateOrConnectWithoutOwnerInput[]
    createMany?: KosCreateManyOwnerInputEnvelope
    connect?: KosWhereUniqueInput | KosWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput> | BookCreateWithoutUserInput[] | BookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookCreateOrConnectWithoutUserInput | BookCreateOrConnectWithoutUserInput[]
    createMany?: BookCreateManyUserInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type KosUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput> | KosCreateWithoutOwnerInput[] | KosUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: KosCreateOrConnectWithoutOwnerInput | KosCreateOrConnectWithoutOwnerInput[]
    upsert?: KosUpsertWithWhereUniqueWithoutOwnerInput | KosUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: KosCreateManyOwnerInputEnvelope
    set?: KosWhereUniqueInput | KosWhereUniqueInput[]
    disconnect?: KosWhereUniqueInput | KosWhereUniqueInput[]
    delete?: KosWhereUniqueInput | KosWhereUniqueInput[]
    connect?: KosWhereUniqueInput | KosWhereUniqueInput[]
    update?: KosUpdateWithWhereUniqueWithoutOwnerInput | KosUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: KosUpdateManyWithWhereWithoutOwnerInput | KosUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: KosScalarWhereInput | KosScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BookUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput> | BookCreateWithoutUserInput[] | BookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookCreateOrConnectWithoutUserInput | BookCreateOrConnectWithoutUserInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutUserInput | BookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookCreateManyUserInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutUserInput | BookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookUpdateManyWithWhereWithoutUserInput | BookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KosUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput> | KosCreateWithoutOwnerInput[] | KosUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: KosCreateOrConnectWithoutOwnerInput | KosCreateOrConnectWithoutOwnerInput[]
    upsert?: KosUpsertWithWhereUniqueWithoutOwnerInput | KosUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: KosCreateManyOwnerInputEnvelope
    set?: KosWhereUniqueInput | KosWhereUniqueInput[]
    disconnect?: KosWhereUniqueInput | KosWhereUniqueInput[]
    delete?: KosWhereUniqueInput | KosWhereUniqueInput[]
    connect?: KosWhereUniqueInput | KosWhereUniqueInput[]
    update?: KosUpdateWithWhereUniqueWithoutOwnerInput | KosUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: KosUpdateManyWithWhereWithoutOwnerInput | KosUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: KosScalarWhereInput | KosScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput> | BookCreateWithoutUserInput[] | BookUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookCreateOrConnectWithoutUserInput | BookCreateOrConnectWithoutUserInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutUserInput | BookUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookCreateManyUserInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutUserInput | BookUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookUpdateManyWithWhereWithoutUserInput | BookUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutKosInput = {
    create?: XOR<UserCreateWithoutKosInput, UserUncheckedCreateWithoutKosInput>
    connectOrCreate?: UserCreateOrConnectWithoutKosInput
    connect?: UserWhereUniqueInput
  }

  export type KosImageCreateNestedManyWithoutKosInput = {
    create?: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput> | KosImageCreateWithoutKosInput[] | KosImageUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosImageCreateOrConnectWithoutKosInput | KosImageCreateOrConnectWithoutKosInput[]
    createMany?: KosImageCreateManyKosInputEnvelope
    connect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
  }

  export type KosFacilityCreateNestedManyWithoutKosInput = {
    create?: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput> | KosFacilityCreateWithoutKosInput[] | KosFacilityUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosFacilityCreateOrConnectWithoutKosInput | KosFacilityCreateOrConnectWithoutKosInput[]
    createMany?: KosFacilityCreateManyKosInputEnvelope
    connect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutKosInput = {
    create?: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput> | ReviewCreateWithoutKosInput[] | ReviewUncheckedCreateWithoutKosInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutKosInput | ReviewCreateOrConnectWithoutKosInput[]
    createMany?: ReviewCreateManyKosInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BookCreateNestedManyWithoutKosInput = {
    create?: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput> | BookCreateWithoutKosInput[] | BookUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookCreateOrConnectWithoutKosInput | BookCreateOrConnectWithoutKosInput[]
    createMany?: BookCreateManyKosInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutKosInput = {
    create?: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput> | LikeCreateWithoutKosInput[] | LikeUncheckedCreateWithoutKosInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutKosInput | LikeCreateOrConnectWithoutKosInput[]
    createMany?: LikeCreateManyKosInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookingCalendarCreateNestedManyWithoutKosInput = {
    create?: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput> | BookingCalendarCreateWithoutKosInput[] | BookingCalendarUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutKosInput | BookingCalendarCreateOrConnectWithoutKosInput[]
    createMany?: BookingCalendarCreateManyKosInputEnvelope
    connect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
  }

  export type KosImageUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput> | KosImageCreateWithoutKosInput[] | KosImageUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosImageCreateOrConnectWithoutKosInput | KosImageCreateOrConnectWithoutKosInput[]
    createMany?: KosImageCreateManyKosInputEnvelope
    connect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
  }

  export type KosFacilityUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput> | KosFacilityCreateWithoutKosInput[] | KosFacilityUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosFacilityCreateOrConnectWithoutKosInput | KosFacilityCreateOrConnectWithoutKosInput[]
    createMany?: KosFacilityCreateManyKosInputEnvelope
    connect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput> | ReviewCreateWithoutKosInput[] | ReviewUncheckedCreateWithoutKosInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutKosInput | ReviewCreateOrConnectWithoutKosInput[]
    createMany?: ReviewCreateManyKosInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput> | BookCreateWithoutKosInput[] | BookUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookCreateOrConnectWithoutKosInput | BookCreateOrConnectWithoutKosInput[]
    createMany?: BookCreateManyKosInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput> | LikeCreateWithoutKosInput[] | LikeUncheckedCreateWithoutKosInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutKosInput | LikeCreateOrConnectWithoutKosInput[]
    createMany?: LikeCreateManyKosInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookingCalendarUncheckedCreateNestedManyWithoutKosInput = {
    create?: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput> | BookingCalendarCreateWithoutKosInput[] | BookingCalendarUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutKosInput | BookingCalendarCreateOrConnectWithoutKosInput[]
    createMany?: BookingCalendarCreateManyKosInputEnvelope
    connect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type EnumKampusFieldUpdateOperationsInput = {
    set?: $Enums.Kampus
  }

  export type EnumKotaFieldUpdateOperationsInput = {
    set?: $Enums.Kota
  }

  export type EnumKalenderFieldUpdateOperationsInput = {
    set?: $Enums.Kalender
  }

  export type UserUpdateOneRequiredWithoutKosNestedInput = {
    create?: XOR<UserCreateWithoutKosInput, UserUncheckedCreateWithoutKosInput>
    connectOrCreate?: UserCreateOrConnectWithoutKosInput
    upsert?: UserUpsertWithoutKosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKosInput, UserUpdateWithoutKosInput>, UserUncheckedUpdateWithoutKosInput>
  }

  export type KosImageUpdateManyWithoutKosNestedInput = {
    create?: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput> | KosImageCreateWithoutKosInput[] | KosImageUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosImageCreateOrConnectWithoutKosInput | KosImageCreateOrConnectWithoutKosInput[]
    upsert?: KosImageUpsertWithWhereUniqueWithoutKosInput | KosImageUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: KosImageCreateManyKosInputEnvelope
    set?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    disconnect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    delete?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    connect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    update?: KosImageUpdateWithWhereUniqueWithoutKosInput | KosImageUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: KosImageUpdateManyWithWhereWithoutKosInput | KosImageUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: KosImageScalarWhereInput | KosImageScalarWhereInput[]
  }

  export type KosFacilityUpdateManyWithoutKosNestedInput = {
    create?: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput> | KosFacilityCreateWithoutKosInput[] | KosFacilityUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosFacilityCreateOrConnectWithoutKosInput | KosFacilityCreateOrConnectWithoutKosInput[]
    upsert?: KosFacilityUpsertWithWhereUniqueWithoutKosInput | KosFacilityUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: KosFacilityCreateManyKosInputEnvelope
    set?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    disconnect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    delete?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    connect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    update?: KosFacilityUpdateWithWhereUniqueWithoutKosInput | KosFacilityUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: KosFacilityUpdateManyWithWhereWithoutKosInput | KosFacilityUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: KosFacilityScalarWhereInput | KosFacilityScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutKosNestedInput = {
    create?: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput> | ReviewCreateWithoutKosInput[] | ReviewUncheckedCreateWithoutKosInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutKosInput | ReviewCreateOrConnectWithoutKosInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutKosInput | ReviewUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: ReviewCreateManyKosInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutKosInput | ReviewUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutKosInput | ReviewUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BookUpdateManyWithoutKosNestedInput = {
    create?: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput> | BookCreateWithoutKosInput[] | BookUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookCreateOrConnectWithoutKosInput | BookCreateOrConnectWithoutKosInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutKosInput | BookUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: BookCreateManyKosInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutKosInput | BookUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: BookUpdateManyWithWhereWithoutKosInput | BookUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutKosNestedInput = {
    create?: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput> | LikeCreateWithoutKosInput[] | LikeUncheckedCreateWithoutKosInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutKosInput | LikeCreateOrConnectWithoutKosInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutKosInput | LikeUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: LikeCreateManyKosInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutKosInput | LikeUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutKosInput | LikeUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookingCalendarUpdateManyWithoutKosNestedInput = {
    create?: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput> | BookingCalendarCreateWithoutKosInput[] | BookingCalendarUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutKosInput | BookingCalendarCreateOrConnectWithoutKosInput[]
    upsert?: BookingCalendarUpsertWithWhereUniqueWithoutKosInput | BookingCalendarUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: BookingCalendarCreateManyKosInputEnvelope
    set?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    disconnect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    delete?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    connect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    update?: BookingCalendarUpdateWithWhereUniqueWithoutKosInput | BookingCalendarUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: BookingCalendarUpdateManyWithWhereWithoutKosInput | BookingCalendarUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: BookingCalendarScalarWhereInput | BookingCalendarScalarWhereInput[]
  }

  export type KosImageUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput> | KosImageCreateWithoutKosInput[] | KosImageUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosImageCreateOrConnectWithoutKosInput | KosImageCreateOrConnectWithoutKosInput[]
    upsert?: KosImageUpsertWithWhereUniqueWithoutKosInput | KosImageUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: KosImageCreateManyKosInputEnvelope
    set?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    disconnect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    delete?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    connect?: KosImageWhereUniqueInput | KosImageWhereUniqueInput[]
    update?: KosImageUpdateWithWhereUniqueWithoutKosInput | KosImageUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: KosImageUpdateManyWithWhereWithoutKosInput | KosImageUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: KosImageScalarWhereInput | KosImageScalarWhereInput[]
  }

  export type KosFacilityUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput> | KosFacilityCreateWithoutKosInput[] | KosFacilityUncheckedCreateWithoutKosInput[]
    connectOrCreate?: KosFacilityCreateOrConnectWithoutKosInput | KosFacilityCreateOrConnectWithoutKosInput[]
    upsert?: KosFacilityUpsertWithWhereUniqueWithoutKosInput | KosFacilityUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: KosFacilityCreateManyKosInputEnvelope
    set?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    disconnect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    delete?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    connect?: KosFacilityWhereUniqueInput | KosFacilityWhereUniqueInput[]
    update?: KosFacilityUpdateWithWhereUniqueWithoutKosInput | KosFacilityUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: KosFacilityUpdateManyWithWhereWithoutKosInput | KosFacilityUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: KosFacilityScalarWhereInput | KosFacilityScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput> | ReviewCreateWithoutKosInput[] | ReviewUncheckedCreateWithoutKosInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutKosInput | ReviewCreateOrConnectWithoutKosInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutKosInput | ReviewUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: ReviewCreateManyKosInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutKosInput | ReviewUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutKosInput | ReviewUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput> | BookCreateWithoutKosInput[] | BookUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookCreateOrConnectWithoutKosInput | BookCreateOrConnectWithoutKosInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutKosInput | BookUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: BookCreateManyKosInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutKosInput | BookUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: BookUpdateManyWithWhereWithoutKosInput | BookUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput> | LikeCreateWithoutKosInput[] | LikeUncheckedCreateWithoutKosInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutKosInput | LikeCreateOrConnectWithoutKosInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutKosInput | LikeUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: LikeCreateManyKosInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutKosInput | LikeUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutKosInput | LikeUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookingCalendarUncheckedUpdateManyWithoutKosNestedInput = {
    create?: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput> | BookingCalendarCreateWithoutKosInput[] | BookingCalendarUncheckedCreateWithoutKosInput[]
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutKosInput | BookingCalendarCreateOrConnectWithoutKosInput[]
    upsert?: BookingCalendarUpsertWithWhereUniqueWithoutKosInput | BookingCalendarUpsertWithWhereUniqueWithoutKosInput[]
    createMany?: BookingCalendarCreateManyKosInputEnvelope
    set?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    disconnect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    delete?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    connect?: BookingCalendarWhereUniqueInput | BookingCalendarWhereUniqueInput[]
    update?: BookingCalendarUpdateWithWhereUniqueWithoutKosInput | BookingCalendarUpdateWithWhereUniqueWithoutKosInput[]
    updateMany?: BookingCalendarUpdateManyWithWhereWithoutKosInput | BookingCalendarUpdateManyWithWhereWithoutKosInput[]
    deleteMany?: BookingCalendarScalarWhereInput | BookingCalendarScalarWhereInput[]
  }

  export type KosCreateNestedOneWithoutImagesInput = {
    create?: XOR<KosCreateWithoutImagesInput, KosUncheckedCreateWithoutImagesInput>
    connectOrCreate?: KosCreateOrConnectWithoutImagesInput
    connect?: KosWhereUniqueInput
  }

  export type KosUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<KosCreateWithoutImagesInput, KosUncheckedCreateWithoutImagesInput>
    connectOrCreate?: KosCreateOrConnectWithoutImagesInput
    upsert?: KosUpsertWithoutImagesInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutImagesInput, KosUpdateWithoutImagesInput>, KosUncheckedUpdateWithoutImagesInput>
  }

  export type KosCreateNestedOneWithoutFacilitiesInput = {
    create?: XOR<KosCreateWithoutFacilitiesInput, KosUncheckedCreateWithoutFacilitiesInput>
    connectOrCreate?: KosCreateOrConnectWithoutFacilitiesInput
    connect?: KosWhereUniqueInput
  }

  export type KosUpdateOneRequiredWithoutFacilitiesNestedInput = {
    create?: XOR<KosCreateWithoutFacilitiesInput, KosUncheckedCreateWithoutFacilitiesInput>
    connectOrCreate?: KosCreateOrConnectWithoutFacilitiesInput
    upsert?: KosUpsertWithoutFacilitiesInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutFacilitiesInput, KosUpdateWithoutFacilitiesInput>, KosUncheckedUpdateWithoutFacilitiesInput>
  }

  export type KosCreateNestedOneWithoutReviewsInput = {
    create?: XOR<KosCreateWithoutReviewsInput, KosUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: KosCreateOrConnectWithoutReviewsInput
    connect?: KosWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type KosUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<KosCreateWithoutReviewsInput, KosUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: KosCreateOrConnectWithoutReviewsInput
    upsert?: KosUpsertWithoutReviewsInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutReviewsInput, KosUpdateWithoutReviewsInput>, KosUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type KosCreateNestedOneWithoutBooksInput = {
    create?: XOR<KosCreateWithoutBooksInput, KosUncheckedCreateWithoutBooksInput>
    connectOrCreate?: KosCreateOrConnectWithoutBooksInput
    connect?: KosWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBooksInput = {
    create?: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooksInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCalendarCreateNestedOneWithoutBookInput = {
    create?: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutBookInput
    connect?: BookingCalendarWhereUniqueInput
  }

  export type BookingCalendarUncheckedCreateNestedOneWithoutBookInput = {
    create?: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutBookInput
    connect?: BookingCalendarWhereUniqueInput
  }

  export type EnumPaymentFieldUpdateOperationsInput = {
    set?: $Enums.Payment
  }

  export type EnumBookStatusFieldUpdateOperationsInput = {
    set?: $Enums.BookStatus
  }

  export type KosUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<KosCreateWithoutBooksInput, KosUncheckedCreateWithoutBooksInput>
    connectOrCreate?: KosCreateOrConnectWithoutBooksInput
    upsert?: KosUpsertWithoutBooksInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutBooksInput, KosUpdateWithoutBooksInput>, KosUncheckedUpdateWithoutBooksInput>
  }

  export type UserUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooksInput
    upsert?: UserUpsertWithoutBooksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBooksInput, UserUpdateWithoutBooksInput>, UserUncheckedUpdateWithoutBooksInput>
  }

  export type BookingCalendarUpdateOneWithoutBookNestedInput = {
    create?: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutBookInput
    upsert?: BookingCalendarUpsertWithoutBookInput
    disconnect?: BookingCalendarWhereInput | boolean
    delete?: BookingCalendarWhereInput | boolean
    connect?: BookingCalendarWhereUniqueInput
    update?: XOR<XOR<BookingCalendarUpdateToOneWithWhereWithoutBookInput, BookingCalendarUpdateWithoutBookInput>, BookingCalendarUncheckedUpdateWithoutBookInput>
  }

  export type BookingCalendarUncheckedUpdateOneWithoutBookNestedInput = {
    create?: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
    connectOrCreate?: BookingCalendarCreateOrConnectWithoutBookInput
    upsert?: BookingCalendarUpsertWithoutBookInput
    disconnect?: BookingCalendarWhereInput | boolean
    delete?: BookingCalendarWhereInput | boolean
    connect?: BookingCalendarWhereUniqueInput
    update?: XOR<XOR<BookingCalendarUpdateToOneWithWhereWithoutBookInput, BookingCalendarUpdateWithoutBookInput>, BookingCalendarUncheckedUpdateWithoutBookInput>
  }

  export type KosCreateNestedOneWithoutLikesInput = {
    create?: XOR<KosCreateWithoutLikesInput, KosUncheckedCreateWithoutLikesInput>
    connectOrCreate?: KosCreateOrConnectWithoutLikesInput
    connect?: KosWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type KosUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<KosCreateWithoutLikesInput, KosUncheckedCreateWithoutLikesInput>
    connectOrCreate?: KosCreateOrConnectWithoutLikesInput
    upsert?: KosUpsertWithoutLikesInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutLikesInput, KosUpdateWithoutLikesInput>, KosUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type KosCreateNestedOneWithoutBookingCalendarInput = {
    create?: XOR<KosCreateWithoutBookingCalendarInput, KosUncheckedCreateWithoutBookingCalendarInput>
    connectOrCreate?: KosCreateOrConnectWithoutBookingCalendarInput
    connect?: KosWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutBookingCalendarInput = {
    create?: XOR<BookCreateWithoutBookingCalendarInput, BookUncheckedCreateWithoutBookingCalendarInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookingCalendarInput
    connect?: BookWhereUniqueInput
  }

  export type KosUpdateOneRequiredWithoutBookingCalendarNestedInput = {
    create?: XOR<KosCreateWithoutBookingCalendarInput, KosUncheckedCreateWithoutBookingCalendarInput>
    connectOrCreate?: KosCreateOrConnectWithoutBookingCalendarInput
    upsert?: KosUpsertWithoutBookingCalendarInput
    connect?: KosWhereUniqueInput
    update?: XOR<XOR<KosUpdateToOneWithWhereWithoutBookingCalendarInput, KosUpdateWithoutBookingCalendarInput>, KosUncheckedUpdateWithoutBookingCalendarInput>
  }

  export type BookUpdateOneWithoutBookingCalendarNestedInput = {
    create?: XOR<BookCreateWithoutBookingCalendarInput, BookUncheckedCreateWithoutBookingCalendarInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookingCalendarInput
    upsert?: BookUpsertWithoutBookingCalendarInput
    disconnect?: BookWhereInput | boolean
    delete?: BookWhereInput | boolean
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutBookingCalendarInput, BookUpdateWithoutBookingCalendarInput>, BookUncheckedUpdateWithoutBookingCalendarInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumKampusFilter<$PrismaModel = never> = {
    equals?: $Enums.Kampus | EnumKampusFieldRefInput<$PrismaModel>
    in?: $Enums.Kampus[]
    notIn?: $Enums.Kampus[]
    not?: NestedEnumKampusFilter<$PrismaModel> | $Enums.Kampus
  }

  export type NestedEnumKotaFilter<$PrismaModel = never> = {
    equals?: $Enums.Kota | EnumKotaFieldRefInput<$PrismaModel>
    in?: $Enums.Kota[]
    notIn?: $Enums.Kota[]
    not?: NestedEnumKotaFilter<$PrismaModel> | $Enums.Kota
  }

  export type NestedEnumKalenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Kalender | EnumKalenderFieldRefInput<$PrismaModel>
    in?: $Enums.Kalender[]
    notIn?: $Enums.Kalender[]
    not?: NestedEnumKalenderFilter<$PrismaModel> | $Enums.Kalender
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumKampusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kampus | EnumKampusFieldRefInput<$PrismaModel>
    in?: $Enums.Kampus[]
    notIn?: $Enums.Kampus[]
    not?: NestedEnumKampusWithAggregatesFilter<$PrismaModel> | $Enums.Kampus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKampusFilter<$PrismaModel>
    _max?: NestedEnumKampusFilter<$PrismaModel>
  }

  export type NestedEnumKotaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kota | EnumKotaFieldRefInput<$PrismaModel>
    in?: $Enums.Kota[]
    notIn?: $Enums.Kota[]
    not?: NestedEnumKotaWithAggregatesFilter<$PrismaModel> | $Enums.Kota
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKotaFilter<$PrismaModel>
    _max?: NestedEnumKotaFilter<$PrismaModel>
  }

  export type NestedEnumKalenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Kalender | EnumKalenderFieldRefInput<$PrismaModel>
    in?: $Enums.Kalender[]
    notIn?: $Enums.Kalender[]
    not?: NestedEnumKalenderWithAggregatesFilter<$PrismaModel> | $Enums.Kalender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKalenderFilter<$PrismaModel>
    _max?: NestedEnumKalenderFilter<$PrismaModel>
  }

  export type NestedEnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[]
    notIn?: $Enums.Payment[]
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type NestedEnumBookStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookStatus | EnumBookStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookStatus[]
    notIn?: $Enums.BookStatus[]
    not?: NestedEnumBookStatusFilter<$PrismaModel> | $Enums.BookStatus
  }

  export type NestedEnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[]
    notIn?: $Enums.Payment[]
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type NestedEnumBookStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookStatus | EnumBookStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookStatus[]
    notIn?: $Enums.BookStatus[]
    not?: NestedEnumBookStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookStatusFilter<$PrismaModel>
    _max?: NestedEnumBookStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type KosCreateWithoutOwnerInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutOwnerInput = {
    id?: number
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutOwnerInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput>
  }

  export type KosCreateManyOwnerInputEnvelope = {
    data: KosCreateManyOwnerInput | KosCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    uuid?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    uuid?: string
    kosId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutUserInput = {
    uuid?: string
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutBooksInput
    bookingCalendar?: BookingCalendarCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateWithoutUserInput = {
    id?: number
    uuid?: string
    kosId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingCalendar?: BookingCalendarUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookCreateOrConnectWithoutUserInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput>
  }

  export type BookCreateManyUserInputEnvelope = {
    data: BookCreateManyUserInput | BookCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    uuid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: number
    uuid?: string
    kosId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    uuid?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    uuid?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KosUpsertWithWhereUniqueWithoutOwnerInput = {
    where: KosWhereUniqueInput
    update: XOR<KosUpdateWithoutOwnerInput, KosUncheckedUpdateWithoutOwnerInput>
    create: XOR<KosCreateWithoutOwnerInput, KosUncheckedCreateWithoutOwnerInput>
  }

  export type KosUpdateWithWhereUniqueWithoutOwnerInput = {
    where: KosWhereUniqueInput
    data: XOR<KosUpdateWithoutOwnerInput, KosUncheckedUpdateWithoutOwnerInput>
  }

  export type KosUpdateManyWithWhereWithoutOwnerInput = {
    where: KosScalarWhereInput
    data: XOR<KosUpdateManyMutationInput, KosUncheckedUpdateManyWithoutOwnerInput>
  }

  export type KosScalarWhereInput = {
    AND?: KosScalarWhereInput | KosScalarWhereInput[]
    OR?: KosScalarWhereInput[]
    NOT?: KosScalarWhereInput | KosScalarWhereInput[]
    id?: IntFilter<"Kos"> | number
    uuid?: StringFilter<"Kos"> | string
    userId?: IntFilter<"Kos"> | number
    name?: StringFilter<"Kos"> | string
    address?: StringFilter<"Kos"> | string
    pricePerMonth?: FloatFilter<"Kos"> | number
    discountPercent?: FloatNullableFilter<"Kos"> | number | null
    discountEndDate?: DateTimeNullableFilter<"Kos"> | Date | string | null
    gender?: EnumGenderFilter<"Kos"> | $Enums.Gender
    kampus?: EnumKampusFilter<"Kos"> | $Enums.Kampus
    kota?: EnumKotaFilter<"Kos"> | $Enums.Kota
    kalender?: EnumKalenderFilter<"Kos"> | $Enums.Kalender
    createdAt?: DateTimeFilter<"Kos"> | Date | string
    updatedAt?: DateTimeFilter<"Kos"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    uuid?: StringFilter<"Review"> | string
    kosId?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    comment?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type BookUpsertWithWhereUniqueWithoutUserInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutUserInput, BookUncheckedUpdateWithoutUserInput>
    create: XOR<BookCreateWithoutUserInput, BookUncheckedCreateWithoutUserInput>
  }

  export type BookUpdateWithWhereUniqueWithoutUserInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutUserInput, BookUncheckedUpdateWithoutUserInput>
  }

  export type BookUpdateManyWithWhereWithoutUserInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutUserInput>
  }

  export type BookScalarWhereInput = {
    AND?: BookScalarWhereInput | BookScalarWhereInput[]
    OR?: BookScalarWhereInput[]
    NOT?: BookScalarWhereInput | BookScalarWhereInput[]
    id?: IntFilter<"Book"> | number
    uuid?: StringFilter<"Book"> | string
    kosId?: IntFilter<"Book"> | number
    userId?: IntFilter<"Book"> | number
    payment?: EnumPaymentFilter<"Book"> | $Enums.Payment
    startDate?: DateTimeFilter<"Book"> | Date | string
    endDate?: DateTimeFilter<"Book"> | Date | string
    durationMonths?: IntFilter<"Book"> | number
    status?: EnumBookStatusFilter<"Book"> | $Enums.BookStatus
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: IntFilter<"Like"> | number
    uuid?: StringFilter<"Like"> | string
    kosId?: IntFilter<"Like"> | number
    userId?: IntFilter<"Like"> | number
    createdAt?: DateTimeFilter<"Like"> | Date | string
    updatedAt?: DateTimeFilter<"Like"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    uuid?: StringFilter<"Notification"> | string
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    relatedId?: IntNullableFilter<"Notification"> | number | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserCreateWithoutKosInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewCreateNestedManyWithoutUserInput
    books?: BookCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    books?: BookUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKosInput, UserUncheckedCreateWithoutKosInput>
  }

  export type KosImageCreateWithoutKosInput = {
    uuid?: string
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosImageUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosImageCreateOrConnectWithoutKosInput = {
    where: KosImageWhereUniqueInput
    create: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput>
  }

  export type KosImageCreateManyKosInputEnvelope = {
    data: KosImageCreateManyKosInput | KosImageCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type KosFacilityCreateWithoutKosInput = {
    uuid?: string
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosFacilityUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosFacilityCreateOrConnectWithoutKosInput = {
    where: KosFacilityWhereUniqueInput
    create: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput>
  }

  export type KosFacilityCreateManyKosInputEnvelope = {
    data: KosFacilityCreateManyKosInput | KosFacilityCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutKosInput = {
    uuid?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    userId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutKosInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput>
  }

  export type ReviewCreateManyKosInputEnvelope = {
    data: ReviewCreateManyKosInput | ReviewCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutKosInput = {
    uuid?: string
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBooksInput
    bookingCalendar?: BookingCalendarCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    userId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingCalendar?: BookingCalendarUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookCreateOrConnectWithoutKosInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput>
  }

  export type BookCreateManyKosInputEnvelope = {
    data: BookCreateManyKosInput | BookCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutKosInput = {
    uuid?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutKosInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput>
  }

  export type LikeCreateManyKosInputEnvelope = {
    data: LikeCreateManyKosInput | LikeCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type BookingCalendarCreateWithoutKosInput = {
    uuid?: string
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    book?: BookCreateNestedOneWithoutBookingCalendarInput
  }

  export type BookingCalendarUncheckedCreateWithoutKosInput = {
    id?: number
    uuid?: string
    bookId?: number | null
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCalendarCreateOrConnectWithoutKosInput = {
    where: BookingCalendarWhereUniqueInput
    create: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput>
  }

  export type BookingCalendarCreateManyKosInputEnvelope = {
    data: BookingCalendarCreateManyKosInput | BookingCalendarCreateManyKosInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutKosInput = {
    update: XOR<UserUpdateWithoutKosInput, UserUncheckedUpdateWithoutKosInput>
    create: XOR<UserCreateWithoutKosInput, UserUncheckedCreateWithoutKosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKosInput, UserUncheckedUpdateWithoutKosInput>
  }

  export type UserUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    books?: BookUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    books?: BookUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KosImageUpsertWithWhereUniqueWithoutKosInput = {
    where: KosImageWhereUniqueInput
    update: XOR<KosImageUpdateWithoutKosInput, KosImageUncheckedUpdateWithoutKosInput>
    create: XOR<KosImageCreateWithoutKosInput, KosImageUncheckedCreateWithoutKosInput>
  }

  export type KosImageUpdateWithWhereUniqueWithoutKosInput = {
    where: KosImageWhereUniqueInput
    data: XOR<KosImageUpdateWithoutKosInput, KosImageUncheckedUpdateWithoutKosInput>
  }

  export type KosImageUpdateManyWithWhereWithoutKosInput = {
    where: KosImageScalarWhereInput
    data: XOR<KosImageUpdateManyMutationInput, KosImageUncheckedUpdateManyWithoutKosInput>
  }

  export type KosImageScalarWhereInput = {
    AND?: KosImageScalarWhereInput | KosImageScalarWhereInput[]
    OR?: KosImageScalarWhereInput[]
    NOT?: KosImageScalarWhereInput | KosImageScalarWhereInput[]
    id?: IntFilter<"KosImage"> | number
    uuid?: StringFilter<"KosImage"> | string
    kosId?: IntFilter<"KosImage"> | number
    file?: StringFilter<"KosImage"> | string
    createdAt?: DateTimeFilter<"KosImage"> | Date | string
    updatedAt?: DateTimeFilter<"KosImage"> | Date | string
  }

  export type KosFacilityUpsertWithWhereUniqueWithoutKosInput = {
    where: KosFacilityWhereUniqueInput
    update: XOR<KosFacilityUpdateWithoutKosInput, KosFacilityUncheckedUpdateWithoutKosInput>
    create: XOR<KosFacilityCreateWithoutKosInput, KosFacilityUncheckedCreateWithoutKosInput>
  }

  export type KosFacilityUpdateWithWhereUniqueWithoutKosInput = {
    where: KosFacilityWhereUniqueInput
    data: XOR<KosFacilityUpdateWithoutKosInput, KosFacilityUncheckedUpdateWithoutKosInput>
  }

  export type KosFacilityUpdateManyWithWhereWithoutKosInput = {
    where: KosFacilityScalarWhereInput
    data: XOR<KosFacilityUpdateManyMutationInput, KosFacilityUncheckedUpdateManyWithoutKosInput>
  }

  export type KosFacilityScalarWhereInput = {
    AND?: KosFacilityScalarWhereInput | KosFacilityScalarWhereInput[]
    OR?: KosFacilityScalarWhereInput[]
    NOT?: KosFacilityScalarWhereInput | KosFacilityScalarWhereInput[]
    id?: IntFilter<"KosFacility"> | number
    uuid?: StringFilter<"KosFacility"> | string
    kosId?: IntFilter<"KosFacility"> | number
    facility?: StringFilter<"KosFacility"> | string
    createdAt?: DateTimeFilter<"KosFacility"> | Date | string
    updatedAt?: DateTimeFilter<"KosFacility"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutKosInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutKosInput, ReviewUncheckedUpdateWithoutKosInput>
    create: XOR<ReviewCreateWithoutKosInput, ReviewUncheckedCreateWithoutKosInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutKosInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutKosInput, ReviewUncheckedUpdateWithoutKosInput>
  }

  export type ReviewUpdateManyWithWhereWithoutKosInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutKosInput>
  }

  export type BookUpsertWithWhereUniqueWithoutKosInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutKosInput, BookUncheckedUpdateWithoutKosInput>
    create: XOR<BookCreateWithoutKosInput, BookUncheckedCreateWithoutKosInput>
  }

  export type BookUpdateWithWhereUniqueWithoutKosInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutKosInput, BookUncheckedUpdateWithoutKosInput>
  }

  export type BookUpdateManyWithWhereWithoutKosInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutKosInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutKosInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutKosInput, LikeUncheckedUpdateWithoutKosInput>
    create: XOR<LikeCreateWithoutKosInput, LikeUncheckedCreateWithoutKosInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutKosInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutKosInput, LikeUncheckedUpdateWithoutKosInput>
  }

  export type LikeUpdateManyWithWhereWithoutKosInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutKosInput>
  }

  export type BookingCalendarUpsertWithWhereUniqueWithoutKosInput = {
    where: BookingCalendarWhereUniqueInput
    update: XOR<BookingCalendarUpdateWithoutKosInput, BookingCalendarUncheckedUpdateWithoutKosInput>
    create: XOR<BookingCalendarCreateWithoutKosInput, BookingCalendarUncheckedCreateWithoutKosInput>
  }

  export type BookingCalendarUpdateWithWhereUniqueWithoutKosInput = {
    where: BookingCalendarWhereUniqueInput
    data: XOR<BookingCalendarUpdateWithoutKosInput, BookingCalendarUncheckedUpdateWithoutKosInput>
  }

  export type BookingCalendarUpdateManyWithWhereWithoutKosInput = {
    where: BookingCalendarScalarWhereInput
    data: XOR<BookingCalendarUpdateManyMutationInput, BookingCalendarUncheckedUpdateManyWithoutKosInput>
  }

  export type BookingCalendarScalarWhereInput = {
    AND?: BookingCalendarScalarWhereInput | BookingCalendarScalarWhereInput[]
    OR?: BookingCalendarScalarWhereInput[]
    NOT?: BookingCalendarScalarWhereInput | BookingCalendarScalarWhereInput[]
    id?: IntFilter<"BookingCalendar"> | number
    uuid?: StringFilter<"BookingCalendar"> | string
    kosId?: IntFilter<"BookingCalendar"> | number
    bookId?: IntNullableFilter<"BookingCalendar"> | number | null
    date?: DateTimeFilter<"BookingCalendar"> | Date | string
    isAvailable?: BoolFilter<"BookingCalendar"> | boolean
    isBooked?: BoolFilter<"BookingCalendar"> | boolean
    createdAt?: DateTimeFilter<"BookingCalendar"> | Date | string
    updatedAt?: DateTimeFilter<"BookingCalendar"> | Date | string
  }

  export type KosCreateWithoutImagesInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutImagesInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutImagesInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutImagesInput, KosUncheckedCreateWithoutImagesInput>
  }

  export type KosUpsertWithoutImagesInput = {
    update: XOR<KosUpdateWithoutImagesInput, KosUncheckedUpdateWithoutImagesInput>
    create: XOR<KosCreateWithoutImagesInput, KosUncheckedCreateWithoutImagesInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutImagesInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutImagesInput, KosUncheckedUpdateWithoutImagesInput>
  }

  export type KosUpdateWithoutImagesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type KosCreateWithoutFacilitiesInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutFacilitiesInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutFacilitiesInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutFacilitiesInput, KosUncheckedCreateWithoutFacilitiesInput>
  }

  export type KosUpsertWithoutFacilitiesInput = {
    update: XOR<KosUpdateWithoutFacilitiesInput, KosUncheckedUpdateWithoutFacilitiesInput>
    create: XOR<KosCreateWithoutFacilitiesInput, KosUncheckedCreateWithoutFacilitiesInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutFacilitiesInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutFacilitiesInput, KosUncheckedUpdateWithoutFacilitiesInput>
  }

  export type KosUpdateWithoutFacilitiesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutFacilitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type KosCreateWithoutReviewsInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutReviewsInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutReviewsInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutReviewsInput, KosUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosCreateNestedManyWithoutOwnerInput
    books?: BookCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosUncheckedCreateNestedManyWithoutOwnerInput
    books?: BookUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type KosUpsertWithoutReviewsInput = {
    update: XOR<KosUpdateWithoutReviewsInput, KosUncheckedUpdateWithoutReviewsInput>
    create: XOR<KosCreateWithoutReviewsInput, KosUncheckedCreateWithoutReviewsInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutReviewsInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutReviewsInput, KosUncheckedUpdateWithoutReviewsInput>
  }

  export type KosUpdateWithoutReviewsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateManyWithoutOwnerNestedInput
    books?: BookUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUncheckedUpdateManyWithoutOwnerNestedInput
    books?: BookUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KosCreateWithoutBooksInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutBooksInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutBooksInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutBooksInput, KosUncheckedCreateWithoutBooksInput>
  }

  export type UserCreateWithoutBooksInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBooksInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBooksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
  }

  export type BookingCalendarCreateWithoutBookInput = {
    uuid?: string
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutBookingCalendarInput
  }

  export type BookingCalendarUncheckedCreateWithoutBookInput = {
    id?: number
    uuid?: string
    kosId: number
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCalendarCreateOrConnectWithoutBookInput = {
    where: BookingCalendarWhereUniqueInput
    create: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
  }

  export type KosUpsertWithoutBooksInput = {
    update: XOR<KosUpdateWithoutBooksInput, KosUncheckedUpdateWithoutBooksInput>
    create: XOR<KosCreateWithoutBooksInput, KosUncheckedCreateWithoutBooksInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutBooksInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutBooksInput, KosUncheckedUpdateWithoutBooksInput>
  }

  export type KosUpdateWithoutBooksInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type UserUpsertWithoutBooksInput = {
    update: XOR<UserUpdateWithoutBooksInput, UserUncheckedUpdateWithoutBooksInput>
    create: XOR<UserCreateWithoutBooksInput, UserUncheckedCreateWithoutBooksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBooksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBooksInput, UserUncheckedUpdateWithoutBooksInput>
  }

  export type UserUpdateWithoutBooksInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingCalendarUpsertWithoutBookInput = {
    update: XOR<BookingCalendarUpdateWithoutBookInput, BookingCalendarUncheckedUpdateWithoutBookInput>
    create: XOR<BookingCalendarCreateWithoutBookInput, BookingCalendarUncheckedCreateWithoutBookInput>
    where?: BookingCalendarWhereInput
  }

  export type BookingCalendarUpdateToOneWithWhereWithoutBookInput = {
    where?: BookingCalendarWhereInput
    data: XOR<BookingCalendarUpdateWithoutBookInput, BookingCalendarUncheckedUpdateWithoutBookInput>
  }

  export type BookingCalendarUpdateWithoutBookInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutBookingCalendarNestedInput
  }

  export type BookingCalendarUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosCreateWithoutLikesInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutLikesInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    bookingCalendar?: BookingCalendarUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutLikesInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutLikesInput, KosUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutLikesInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    books?: BookCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    books?: BookUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type KosUpsertWithoutLikesInput = {
    update: XOR<KosUpdateWithoutLikesInput, KosUncheckedUpdateWithoutLikesInput>
    create: XOR<KosCreateWithoutLikesInput, KosUncheckedCreateWithoutLikesInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutLikesInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutLikesInput, KosUncheckedUpdateWithoutLikesInput>
  }

  export type KosUpdateWithoutLikesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    books?: BookUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    books?: BookUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    books?: BookCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    uuid?: string
    name: string
    email: string
    password: string
    phone: string
    profile_picture?: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    kos?: KosUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    books?: BookUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    books?: BookUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    profile_picture?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    books?: BookUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KosCreateWithoutBookingCalendarInput = {
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutKosInput
    images?: KosImageCreateNestedManyWithoutKosInput
    facilities?: KosFacilityCreateNestedManyWithoutKosInput
    reviews?: ReviewCreateNestedManyWithoutKosInput
    books?: BookCreateNestedManyWithoutKosInput
    likes?: LikeCreateNestedManyWithoutKosInput
  }

  export type KosUncheckedCreateWithoutBookingCalendarInput = {
    id?: number
    uuid?: string
    userId: number
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: KosImageUncheckedCreateNestedManyWithoutKosInput
    facilities?: KosFacilityUncheckedCreateNestedManyWithoutKosInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutKosInput
    books?: BookUncheckedCreateNestedManyWithoutKosInput
    likes?: LikeUncheckedCreateNestedManyWithoutKosInput
  }

  export type KosCreateOrConnectWithoutBookingCalendarInput = {
    where: KosWhereUniqueInput
    create: XOR<KosCreateWithoutBookingCalendarInput, KosUncheckedCreateWithoutBookingCalendarInput>
  }

  export type BookCreateWithoutBookingCalendarInput = {
    uuid?: string
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    kos: KosCreateNestedOneWithoutBooksInput
    user: UserCreateNestedOneWithoutBooksInput
  }

  export type BookUncheckedCreateWithoutBookingCalendarInput = {
    id?: number
    uuid?: string
    kosId: number
    userId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateOrConnectWithoutBookingCalendarInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutBookingCalendarInput, BookUncheckedCreateWithoutBookingCalendarInput>
  }

  export type KosUpsertWithoutBookingCalendarInput = {
    update: XOR<KosUpdateWithoutBookingCalendarInput, KosUncheckedUpdateWithoutBookingCalendarInput>
    create: XOR<KosCreateWithoutBookingCalendarInput, KosUncheckedCreateWithoutBookingCalendarInput>
    where?: KosWhereInput
  }

  export type KosUpdateToOneWithWhereWithoutBookingCalendarInput = {
    where?: KosWhereInput
    data: XOR<KosUpdateWithoutBookingCalendarInput, KosUncheckedUpdateWithoutBookingCalendarInput>
  }

  export type KosUpdateWithoutBookingCalendarInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutKosNestedInput
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutBookingCalendarInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
  }

  export type BookUpsertWithoutBookingCalendarInput = {
    update: XOR<BookUpdateWithoutBookingCalendarInput, BookUncheckedUpdateWithoutBookingCalendarInput>
    create: XOR<BookCreateWithoutBookingCalendarInput, BookUncheckedCreateWithoutBookingCalendarInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutBookingCalendarInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutBookingCalendarInput, BookUncheckedUpdateWithoutBookingCalendarInput>
  }

  export type BookUpdateWithoutBookingCalendarInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutBooksNestedInput
    user?: UserUpdateOneRequiredWithoutBooksNestedInput
  }

  export type BookUncheckedUpdateWithoutBookingCalendarInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosCreateManyOwnerInput = {
    id?: number
    uuid?: string
    name: string
    address: string
    pricePerMonth: number
    discountPercent?: number | null
    discountEndDate?: Date | string | null
    gender: $Enums.Gender
    kampus: $Enums.Kampus
    kota: $Enums.Kota
    kalender: $Enums.Kalender
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    uuid?: string
    kosId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateManyUserInput = {
    id?: number
    uuid?: string
    kosId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateManyUserInput = {
    id?: number
    uuid?: string
    kosId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    uuid?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    relatedId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosUpdateWithoutOwnerInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUpdateManyWithoutKosNestedInput
    reviews?: ReviewUpdateManyWithoutKosNestedInput
    books?: BookUpdateManyWithoutKosNestedInput
    likes?: LikeUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: KosImageUncheckedUpdateManyWithoutKosNestedInput
    facilities?: KosFacilityUncheckedUpdateManyWithoutKosNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutKosNestedInput
    books?: BookUncheckedUpdateManyWithoutKosNestedInput
    likes?: LikeUncheckedUpdateManyWithoutKosNestedInput
    bookingCalendar?: BookingCalendarUncheckedUpdateManyWithoutKosNestedInput
  }

  export type KosUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pricePerMonth?: FloatFieldUpdateOperationsInput | number
    discountPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    discountEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kampus?: EnumKampusFieldUpdateOperationsInput | $Enums.Kampus
    kota?: EnumKotaFieldUpdateOperationsInput | $Enums.Kota
    kalender?: EnumKalenderFieldUpdateOperationsInput | $Enums.Kalender
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutBooksNestedInput
    bookingCalendar?: BookingCalendarUpdateOneWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingCalendar?: BookingCalendarUncheckedUpdateOneWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kos?: KosUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    kosId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageCreateManyKosInput = {
    id?: number
    uuid?: string
    file: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosFacilityCreateManyKosInput = {
    id?: number
    uuid?: string
    facility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyKosInput = {
    id?: number
    uuid?: string
    userId: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateManyKosInput = {
    id?: number
    uuid?: string
    userId: number
    payment: $Enums.Payment
    startDate: Date | string
    endDate: Date | string
    durationMonths?: number
    status: $Enums.BookStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateManyKosInput = {
    id?: number
    uuid?: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCalendarCreateManyKosInput = {
    id?: number
    uuid?: string
    bookId?: number | null
    date: Date | string
    isAvailable?: boolean
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KosImageUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosImageUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KosFacilityUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    facility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBooksNestedInput
    bookingCalendar?: BookingCalendarUpdateOneWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingCalendar?: BookingCalendarUncheckedUpdateOneWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    status?: EnumBookStatusFieldUpdateOperationsInput | $Enums.BookStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCalendarUpdateWithoutKosInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    book?: BookUpdateOneWithoutBookingCalendarNestedInput
  }

  export type BookingCalendarUncheckedUpdateWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCalendarUncheckedUpdateManyWithoutKosInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    bookId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KosCountOutputTypeDefaultArgs instead
     */
    export type KosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KosDefaultArgs instead
     */
    export type KosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KosImageDefaultArgs instead
     */
    export type KosImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KosImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KosFacilityDefaultArgs instead
     */
    export type KosFacilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KosFacilityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookDefaultArgs instead
     */
    export type BookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeDefaultArgs instead
     */
    export type LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookingCalendarDefaultArgs instead
     */
    export type BookingCalendarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookingCalendarDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}