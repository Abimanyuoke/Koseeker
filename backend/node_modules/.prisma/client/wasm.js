
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  profile_picture: 'profile_picture',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KosScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  name: 'name',
  address: 'address',
  pricePerMonth: 'pricePerMonth',
  discountPercent: 'discountPercent',
  gender: 'gender',
  kampus: 'kampus',
  kota: 'kota',
  kalender: 'kalender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KosImageScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  file: 'file',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KosFacilityScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  facility: 'facility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  userId: 'userId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  userId: 'userId',
  payment: 'payment',
  startDate: 'startDate',
  endDate: 'endDate',
  durationMonths: 'durationMonths',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  relatedId: 'relatedId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingCalendarScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  kosId: 'kosId',
  bookId: 'bookId',
  date: 'date',
  isAvailable: 'isAvailable',
  isBooked: 'isBooked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  superadmin: 'superadmin',
  owner: 'owner',
  society: 'society'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  all: 'all'
};

exports.Kampus = exports.$Enums.Kampus = {
  UGM: 'UGM',
  UNDIP: 'UNDIP',
  UNPAD: 'UNPAD',
  STAN: 'STAN',
  UNAIR: 'UNAIR',
  UB: 'UB',
  UI: 'UI',
  ITS: 'ITS',
  ITB: 'ITB',
  UNS: 'UNS',
  TELKOM: 'TELKOM',
  UNESA: 'UNESA',
  BINUS: 'BINUS',
  UMM: 'UMM'
};

exports.Kota = exports.$Enums.Kota = {
  Jakarta: 'Jakarta',
  Bandung: 'Bandung',
  Surabaya: 'Surabaya',
  Medan: 'Medan',
  Semarang: 'Semarang',
  Makassar: 'Makassar',
  Palembang: 'Palembang',
  Batam: 'Batam',
  Malang: 'Malang',
  Bogor: 'Bogor',
  Depok: 'Depok',
  Tangerang: 'Tangerang',
  Solo: 'Solo',
  Makasar: 'Makasar',
  Yogyakarta: 'Yogyakarta',
  Bekasi: 'Bekasi'
};

exports.Kalender = exports.$Enums.Kalender = {
  minggu: 'minggu',
  bulan: 'bulan',
  tahun: 'tahun'
};

exports.Payment = exports.$Enums.Payment = {
  cash: 'cash',
  transfer: 'transfer'
};

exports.BookStatus = exports.$Enums.BookStatus = {
  pending: 'pending',
  accept: 'accept',
  reject: 'reject'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  BOOKING_CREATED: 'BOOKING_CREATED',
  BOOKING_ACCEPTED: 'BOOKING_ACCEPTED',
  BOOKING_REJECTED: 'BOOKING_REJECTED',
  BOOKING_REMINDER: 'BOOKING_REMINDER',
  PAYMENT_DUE: 'PAYMENT_DUE',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Kos: 'Kos',
  KosImage: 'KosImage',
  KosFacility: 'KosFacility',
  Review: 'Review',
  Book: 'Book',
  Like: 'Like',
  Notification: 'Notification',
  BookingCalendar: 'BookingCalendar'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
