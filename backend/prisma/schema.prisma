generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default("")
  name            String
  email           String    @unique
  password        String
  phone           String
  profile_picture String    @default("")
  role            Role
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  kos             Kos[]     @relation("UserKos")
  reviews         Review[]
  books           Book[]
  comments        Comment[]
  likes           Like[]
}

model Kos {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  userId        Int
  name          String
  address       String
  pricePerMonth Float
  gender        Gender
  owner         User          @relation("UserKos", fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  images        KosImage[]
  facilities    KosFacility[]
  reviews       Review[]
  books         Book[]
  comments      Comment[]
  likes         Like[]
}

model KosImage {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  file      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id])
}

model KosFacility {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  facility  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  userId    Int
  comment   String
  kos       Kos      @relation(fields: [kosId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid())
  kosId     Int
  userId    Int
  commentId Int
  payment   Payment
  startDate DateTime
  endDate   DateTime
  status    BookStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  kos       Kos        @relation(fields: [kosId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  comment   Comment    @relation(fields: [commentId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  Book      Book[]
}

model Like {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  kosId     Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kos       Kos      @relation(fields: [kosId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([kosId, userId])
}

enum Role {
  superadmin
  owner
  society
}

enum Gender {
  male
  female
  all
}

enum BookStatus {
  pending
  accept
  reject
}

enum Payment {
  cash
  transfer
}
